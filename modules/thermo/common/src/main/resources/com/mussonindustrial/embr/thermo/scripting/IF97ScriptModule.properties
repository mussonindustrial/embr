common-param.h=specific enthalpy (J/kg)
common-param.l=wavelength (m)
common-param.p=absolute pressure (Pa)
common-param.rho=density (kg/m³)
common-param.s=specific entropy (J/(kg·K))
common-param.t=temperature (K)
common-param.x=vapor fraction

compressibility.desc=Calculates isothermal compressibility.<br><br><b>Accepted parameters:</b><br>compressibility(h, s)<br>compressibility(p, s)<br>compressibility(p, s)<br>compressibility(p, t)<br>
compressibility.returns=isothermal compressibility (1/Pa)

compressionFactor.desc=Calculates compression factor (real-gas factor).<br><br><b>Accepted parameters:</b><br>compressionFactor(p, t)<br>
compressionFactor.returns=compression factor

density.desc=Calculates density. This is a convenience method which simply calls 1.0 / specificVolume.<br><br><b>Accepted parameters:</b><br>density(h, s)<br>density(p, h)<br>density(p, s)<br>density(p, t)<br>density(p, x)<br>density(t, x)<br>
density.returns=density (kg/m³)

dielectricConstant.desc=Calculates dielectric constant.<br><br><b>Accepted parameters:</b><br>dielectricConstant(h, s)<br>dielectricConstant(p, h)<br>dielectricConstant(p, s)<br>dielectricConstant(p, t)<br>dielectricConstant(rho, t)<br>
dielectricConstant.returns=dielectric constant [-]

heatCapacityRatio.desc=Calculates heat capacity ratio.<br><br><b>Accepted parameters:</b><br>heatCapacityRatio(h, s)<br>heatCapacityRatio(p, h)<br>heatCapacityRatio(p, s)<br>heatCapacityRatio(p, t)<br>
heatCapacityRatio.returns=heat capacity ratio

isentropicExponent.desc=Calculates isentropic exponent.<br><br><b>Accepted parameters:</b><br>isentropicExponent(h, s)<br>isentropicExponent(p, h)<br>isentropicExponent(p, s)<br>isentropicExponent(p, t)<br>
isentropicExponent.returns=isentropic exponent

isobaricCubicExpansionCoefficient.desc=Calculates isobaric cubic expansion coefficient.<br><br><b>Accepted parameters:</b><br>isobaricCubicExpansionCoefficient(h, s)<br>isobaricCubicExpansionCoefficient(p, h)<br>isobaricCubicExpansionCoefficient(p, s)<br>isobaricCubicExpansionCoefficient(p, t)<br>isobaricCubicExpansionCoefficient(p, x)<br>isobaricCubicExpansionCoefficient(t, x)<br>
isobaricCubicExpansionCoefficient.returns=isobaric cubic expansion coefficient (1/K)

isobaricHeatCapacity.desc=Calculates specific isobaric heat capacity.<br><br><b>Accepted parameters:</b><br>isobaricHeatCapacity(h, s)<br>isobaricHeatCapacity(p, h)<br>isobaricHeatCapacity(p, s)<br>isobaricHeatCapacity(p, t)<br>
isobaricHeatCapacity.returns=specific isobaric heat capacity (J/(kg·K))

isochoricHeatCapacity.desc=Calculates specific isochoric heat capacity.<br><br><b>Accepted parameters:</b><br>isochoricHeatCapacity(h, s)<br>isochoricHeatCapacity(p, h)<br>isochoricHeatCapacity(p, s)<br>isochoricHeatCapacity(p, t)<br>
isochoricHeatCapacity.returns=specific isochoric heat capacity (J/(kg·K))

kinematicViscosity.desc=Calculates kinematic viscosity.<br><br><b>Accepted parameters:</b><br>kinematicViscosity(h, s)<br>kinematicViscosity(p, h)<br>kinematicViscosity(p, s)<br>kinematicViscosity(p, t)<br>kinematicViscosity(rho, t)<br>
kinematicViscosity.returns=kinematic viscosity (m²/s)

prandtl.desc=Calculates Prandtl number.<br><br><b>Accepted parameters:</b><br>prandtl(h, s)<br>prandtl(p, h)<br>prandtl(p, s)<br>prandtl(p, t)<br>
prandtl.returns=Prandtl number

pressure.desc=Calculates pressure.<br><br><b>Accepted parameters:</b><br>pressure(h, s)<br>
pressure.returns=pressure (Pa)

refractiveIndex.desc=Calculates refractive index.<br><br><b>Accepted parameters:</b><br>refractiveIndex(h, s, l)<br>refractiveIndex(p, h, l)<br>refractiveIndex(p, s, l)<br>refractiveIndex(p, t, l)<br>refractiveIndex(rho, t, l)<br>
refractiveIndex.returns=refractive index [-]

saturationPressure.desc=Calculates saturation pressure.<br><br><b>Accepted parameters:</b><br>saturationPressure(t)<br>saturationPressure(h, s)<br>
saturationPressure.returns=saturation pressure (Pa)

saturationTemperature.desc=Calculates saturation temperature.<br><br><b>Accepted parameters:</b><br>saturationTemperature(p)<br>saturationTemperature(h, s)<br>
saturationTemperature.returns=saturation temperature (K)

specificEnthalpy.desc=Calculates specific enthalpy.<br><br><b>Accepted parameters:</b>specificEnthalpy(p, s)<br>specificEnthalpy(p, t)<br>specificEnthalpy(p, x)<br>specificEnthalpy(t, x)<br>
specificEnthalpy.returns=specific enthalpy (J/kg)

specificEnthalpySaturatedLiquid.desc=Calculates the specific enthalpy for saturated liquid.<br><br><b>Accepted parameters:</b><br>specificEnthalpySaturatedLiquid(p)<br>specificEnthalpySaturatedLiquid(t)<br>
specificEnthalpySaturatedLiquid.returns=specific enthalpy for saturated liquid (J/kg)

specificEnthalpySaturatedVapor.desc=Calculates the specific enthalpy for saturated vapor.<br><br><b>Accepted parameters:</b><br>specificEnthalpySaturatedVapor(p)<br>specificEnthalpySaturatedVapor(t)<br>
specificEnthalpySaturatedVapor.returns=specific enthalpy for saturated vapor (J/kg)

specificEntropy.desc=Calculates specific entropy.<br><br><b>Accepted parameters:</b>specificEntropy(p, h)<br>specificEntropy(p, t)<br>specificEntropy(p, x)<br>specificEntropy(t, x)<br>
specificEntropy.returns=specific entropy (J/(kg·K))

specificEntropySaturatedLiquid.desc=Calculates the specific entropy for saturated liquid.<br><br><b>Accepted parameters:</b><br>specificEntropySaturatedLiquid(p)<br>specificEntropySaturatedLiquid(t)<br>
specificEntropySaturatedLiquid.returns=specific entropy for saturated liquid (J/(kg·K))

specificEntropySaturatedVapor.desc=Calculates the specific entropy for saturated vapor.<br><br><b>Accepted parameters:</b><br>specificEntropySaturatedVapor(p)<br>specificEntropySaturatedVapor(t)<br>
specificEntropySaturatedVapor.returns=specific entropy for saturated vapor (J/(kg·K))

specificGibbsFreeEnergy.desc=Calculates specific Gibbs free energy.<br><br><b>Accepted parameters:</b><br>specificGibbsFreeEnergy(p, t)<br>
specificGibbsFreeEnergy.returns=specific Gibbs free energy (J/kg)

specificInternalEnergy.desc=Calculates specific internal energy.<br><br><b>Accepted parameters:</b><br>specificInternalEnergy(p, h)<br>specificInternalEnergy(p, s)<br>specificInternalEnergy(p, t)<br>specificInternalEnergy(p, x)<br>specificInternalEnergy(t, x)<br>
specificInternalEnergy.returns=specific internal energy (J/kg)

specificInternalEnergySaturatedLiquid.desc=Calculates the specific internal energy for saturated liquid.<br><br><b>Accepted parameters:</b><br>specificInternalEnergySaturatedLiquid(p)<br>specificInternalEnergySaturatedLiquid(t)<br>
specificInternalEnergySaturatedLiquid.returns=specific internal energy for saturated liquid (J/kg)

specificInternalEnergySaturatedVapor.desc=Calculates the specific internal energy for saturated vapor.<br><br><b>Accepted parameters:</b><br>specificInternalEnergySaturatedVapor(p)<br>specificInternalEnergySaturatedVapor(t)<br>
specificInternalEnergySaturatedVapor.returns=specific internal energy for saturated vapor (J/kg)

specificVolume.desc=Calculates specific volume.<br><br><b>Accepted parameters:</b><br>specificVolume(h, s)<br>specificVolume(p, h)<br>specificVolume(p, s)<br>specificVolume(p, t)<br>specificVolume(p, x)<br>specificVolume(t, x)<br>
specificVolume.returns=specific volume

specificVolumeSaturatedLiquid.desc=Calculates the specific volume for saturated liquid.<br><br><b>Accepted parameters:</b><br>specificVolumeSaturatedLiquid(p)<br>specificVolumeSaturatedLiquid(t)<br>
specificVolumeSaturatedLiquid.returns=specific volume for saturated liquid (m³/kg)

specificVolumeSaturatedVapor.desc=Calculates the specific volume for saturated vapor.<br><br><b>Accepted parameters:</b><br>specificVolumeSaturatedVapor(p)<br>specificVolumeSaturatedVapor(t)<br>
specificVolumeSaturatedVapor.returns=specific volume for saturated vapor (m³/kg)

speedOfSound.desc=Calculates the speed of sound.<br><br><b>Accepted parameters:</b><br>speedOfSound(h, s)<br>speedOfSound(p, h)<br>speedOfSound(p, s)<br>speedOfSound(p, t)<br>
speedOfSound.returns=speed of sound (m/s)

surfaceTension.desc=Calculates surface tension.<br><br><b>Accepted parameters:</b><br>surfaceTension(p)<br>surfaceTension(t)<br>
surfaceTension.returns=surface tension (N/m)

temperature.desc=Calculates temperature.<br><br><b>Accepted parameters:</b><br>temperature(h, s)<br>temperature(p, h)<br>temperature(p, s)<br>
temperature.returns=temperature (K)

thermalConductivity.desc=Calculates thermal conductivity.<br><br><b>Accepted parameters:</b><br>thermalConductivity(h, s)<br>thermalConductivity(p, h)<br>thermalConductivity(p, s)<br>thermalConductivity(p, t)<br>thermalConductivity(rho, t)<br>
thermalConductivity.returns=thermal conductivity (W/(m·K))

thermalDiffusivity.desc=Calculates thermal diffusivity.<br><br><b>Accepted parameters:</b><br>thermalDiffusivity(h, s)<br>thermalDiffusivity(p, h)<br>thermalDiffusivity(p, s)<br>thermalDiffusivity(p, t)<br>
thermalDiffusivity.returns=thermal diffusivity (m²/s)

vaporFraction.desc=Calculates vapor fraction.<br><br><b>Accepted parameters:</b><br>vaporFraction(h, s)<br>vaporFraction(p, h)<br>vaporFraction(p, s)<br>vaporFraction(t, s)<br>
vaporFraction.returns=vapor fraction