{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$defs": {
        "a11y_props": {
            "type": ["boolean", "object"],
            "description": "Accessibility parameters.",
            "properties": {
                "containerMessage": {
                    "type": "string",
                    "description": "Message for screen readers for outer swiper container"
                },
                "containerRole": {
                    "type": "string",
                    "description": "Value of the \"role\" attribute to be set on the swiper container"
                },
                "containerRoleDescriptionMessage": {
                    "type": "string",
                    "description": "Message for screen readers describing the role of outer swiper container"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enables A11y",
                    "default": true
                },
                "firstSlideMessage": {
                    "type": "string",
                    "description": "Message for screen readers for previous button when swiper is on first slide",
                    "default": "This is the first slide"
                },
                "id": {
                    "type": ["string", "number"],
                    "description": "Value of id attribute to be set on swiper-wrapper. If null will be generated automatically"
                },
                "itemRoleDescriptionMessage": {
                    "type": "string",
                    "description": "Message for screen readers describing the role of slide element"
                },
                "lastSlideMessage": {
                    "type": "string",
                    "description": "Message for screen readers for next button when swiper is on last slide",
                    "default": "This is the last slide"
                },
                "nextSlideMessage": {
                    "type": "string",
                    "description": "Message for screen readers for next button",
                    "default": "Next slide"
                },
                "notificationClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "CSS class name of A11y notification"
                },
                "paginationBulletMessage": {
                    "type": "string",
                    "description": "Message for screen readers for single pagination bullet",
                    "default": "Go to slide {{index}}"
                },
                "prevSlideMessage": {
                    "type": "string",
                    "description": "Message for screen readers for previous button",
                    "default": "Previous slide"
                },
                "scrollOnFocus": {
                    "type": "boolean",
                    "description": "Enables scrolling to the slide that has been focused",
                    "default": true
                },
                "slideLabelMessage": {
                    "type": "string",
                    "description": "Message for screen readers describing the label of slide element",
                    "default": "{{index}} / {{slidesLength}}"
                },
                "slideRole": {
                    "type": "string",
                    "description": "Value of swiper slide role attribute"
                }
            }
        },
        "autoplay_props": {
            "type": ["object", "boolean"],
            "description": "Autoplay parameters.",
            "properties": {
                "delay": {
                    "type": "number",
                    "description": "Delay between transitions (in ms). If this parameter is not specified, auto play will be disabled",
                    "default": 3000
                },
                "disableOnInteraction": {
                    "type": "boolean",
                    "description": "Set to false and autoplay will not be disabled after user interactions (swipes), it will be restarted every time after interaction"
                },
                "pauseOnMouseEnter": {
                    "type": "boolean",
                    "description": "When enabled autoplay will be paused on pointer (mouse) enter over Swiper container.",
                    "default": false
                },
                "reverseDirection": {
                    "type": "boolean",
                    "description": "Enables autoplay in reverse direction",
                    "default": false
                },
                "stopOnLastSlide": {
                    "type": "boolean",
                    "description": "Enable this parameter and autoplay will be stopped when it reaches last slide (has no effect in loop mode)",
                    "default": false
                },
                "waitForTransition": {
                    "type": "boolean",
                    "description": "When enabled autoplay will wait for wrapper transition to continue. Can be disabled in case of using Virtual Translate when your slider may not have transition"
                }
            }
        },
        "controller_props": {
            "description": "Controller parameters",
            "type": ["boolean", "object"],
            "properties": {
                "by": {
                    "type": "string",
                    "description": "Defines a way how to control another slider: slide by slide (with respect to other slider's grid) or depending on all slides/container (depending on total slider percentage).",
                    "enum": [
                        "container",
                        "slide"
                    ],
                    "default": "slide"
                },
                "control": {
                    "type": "string",
                    "description": "CSS selector of Swiper element",
                    "default": ""
                },
                "inverse": {
                    "type": "boolean",
                    "description": "Set to true and controlling will be in inverse direction"
                }
            }
        },
        "direction": {
            "description": "Swiper direction",
            "type": "string",
            "enum": [
                "horizontal",
                "vertical"
            ]
        },
        "effect": {
            "description": "Transition effect",
            "type": "string",
            "enum": [
                "cards",
                "coverflow",
                "creative",
                "cube",
                "fade",
                "flip",
                "slide"
            ]
        },
        "effect_cards_props": {
            "description": "Cards-effect parameters",
            "type": "object",
            "properties": {
                "perSlideOffset": {
                    "type": "number",
                    "description": "Offset distance per slide (in px)",
                    "default": 8
                },
                "perSlideRotate": {
                    "type": "number",
                    "description": "Rotate angle per slide (in degrees)",
                    "default": 2
                },
                "rotate": {
                    "type": "boolean",
                    "description": "Enables cards rotation",
                    "default": true
                },
                "slideShadows": {
                    "type": "boolean",
                    "description": "Enables slides shadows",
                    "default": true
                }
            }
        },
        "effect_coverflow_props": {
            "description": "Coverflow-effect parameters",
            "type": "object",
            "properties": {
                "depth": {
                    "type": "number",
                    "description": "Depth offset in px (slides translate in Z axis)",
                    "default": 100
                },
                "modifier": {
                    "type": "number",
                    "description": "Effect multiplier",
                    "default": 1
                },
                "rotate": {
                    "type": "number",
                    "description": "Slide rotate in degrees",
                    "default": 50
                },
                "scale": {
                    "type": "number",
                    "description": "Slide scale effect",
                    "default": 1
                },
                "slideShadows": {
                    "type": "boolean",
                    "description": "Enables slides shadows",
                    "default": true
                },
                "stretch": {
                    "type": "number",
                    "description": "Stretch space between slides (in px)",
                    "default": 0
                }
            }
        },
        "effect_creative_props": {
            "description": "Creative-effect parameters",
            "type": "object",
            "properties": {
                "limitProgress": {
                    "type": "number",
                    "description": "Limit progress/offset to amount of side slides. If 1, then slides all slides after prev/next will have same state. If 2, then all slides after 2nd before/after active will have same state, etc.",
                    "default": 1
                },
                "next": {
                    "$ref": "#/$defs/effect_creative_transform",
                    "description": "Next slide transformations."
                },
                "perspective": {
                    "type": "boolean",
                    "description": "Enable this parameter if your custom transforms require 3D transformations (translateZ, rotateX, rotateY )",
                    "default": true
                },
                "prev": {
                    "$ref": "#/$defs/effect_creative_transform",
                    "description": "Previous slide transformations."
                },
                "progressMultiplier": {
                    "type": "number",
                    "description": "Allows to multiply slides transformations and opacity.",
                    "default": 1
                },
                "shadowPerProgress": {
                    "type": "boolean",
                    "description": "Splits shadow \"opacity\" per slide based on limitProgress (only if transformation shadows enabled). E.g. setting limitProgress: 2 and enabling shadowPerProgress, will set shadow opacity to 0.5 and 1 on two slides next to active. With this parameter disabled, all slides beside active will have shadow with 1 opacity",
                    "default": false
                }
            }
        },
        "effect_creative_transform": {
            "description": "Creative-effect transform",
            "type": "object",
            "properties": {
                "translate": {
                    "type": "array",
                    "description": "Array with translate X, Y and Z values",
                    "default": [],
                    "items": {
                        "type": ["string", "number"]
                    }
                },
                "rotate": {
                    "type": "array",
                    "description": "Array with rotate X, Y and Z values (in deg)",
                    "default": [],
                    "items": {
                        "type": ["number"]
                    }
                },
                "opacity": {
                    "type": "number",
                    "description": "Slide opacity"
                },
                "scale": {
                    "type": "number",
                    "description": "Slide scale"
                },
                "shadow": {
                    "type": "boolean",
                    "description": "Enables slide shadow"
                },
                "origin": {
                    "type": "number",
                    "description": "Transform origin, e.g. `left bottom`"
                }
            }
        },
        "effect_cube_props": {
            "description": "Cube-effect parameters",
            "type": "object",
            "properties": {
                "shadow": {
                    "type": "boolean",
                    "description": "Enables main slider shadow",
                    "default": true
                },
                "shadowOffset": {
                    "type": "number",
                    "description": "Main shadow offset in px",
                    "default": 20
                },
                "shadowScale": {
                    "type": "number",
                    "description": "Main shadow scale ratio",
                    "default": 0.94
                },
                "slideShadows": {
                    "type": "boolean",
                    "description": "Enables slides shadows",
                    "default": true
                }
            }
        },
        "effect_fade_props": {
            "description": "Fade-effect parameters",
            "type": "object",
            "properties": {
                "crossFade": {
                    "type": "boolean",
                    "description": "Enables slides cross fade",
                    "default": false
                }
            }
        },
        "effect_flip_props": {
            "description": "Flip-effect parameters",
            "type": "object",
            "properties": {
                "limitRotation": {
                    "type": "boolean",
                    "description": "Limit edge slides rotation",
                    "default": true
                },
                "slideShadows": {
                    "type": "boolean",
                    "description": "Enables slides shadows",
                    "default": true
                }
            }
        },
        "effect_slide_props": {
            "description": "Slide-effect parameters",
            "type": "object"
        },
        "embedded_view_config": {
            "type": "object",
            "properties": {
                "viewPath": {
                    "type": "string",
                    "format": "view-path",
                    "description": "View path of this instance.",
                    "default": ""
                },
                "viewParams": {
                    "type": "object",
                    "description": "Parameters for this instance.",
                    "default": {},
                    "extension": {
                        "view-params": {
                            "path":"../viewPath"
                        }
                    }
                },
                "viewStyle": {
                    "$ref": "urn:ignition-schema:schemas/style-properties.schema.json",
                    "default": {
                        "classes": ""
                    }
                },
                "slideStyle": {
                    "$ref": "urn:ignition-schema:schemas/style-properties.schema.json",
                    "description": "Styles applied to this slide instances.",
                    "default": {
                        "classes": ""
                    }
                },
                "useDefaultHeight": {
                    "type": "boolean",
                    "description": "Use default view height.",
                    "default": false
                },
                "useDefaultMinHeight": {
                    "type": "boolean",
                    "description": "Use default minimum view height.",
                    "default": false
                },
                "useDefaultMinWidth": {
                    "type": "boolean",
                    "description": "Use default minimum view height.",
                    "default": false
                },
                "useDefaultWidth": {
                    "type": "boolean",
                    "description": "Use default view width.",
                    "default": false
                }
            }
        },
        "function": {
            "type": ["string", "null"]
        },
        "grid_props": {
            "description": "Grid parameters to enable \"multirow\" slider.",
            "type": ["boolean", "object"],
            "properties": {
                "fill": {
                    "type": "string",
                    "description": "Can be 'column' or 'row'. Defines how slides should fill rows, by column or by row",
                    "enum": [
                        "column",
                        "row"
                    ],
                    "default": "column"
                },
                "rows": {
                    "type": "number",
                    "description": "Number of slides rows, for multirow layout",
                    "default": 1
                }
            }
        },
        "hash_navigation_props": {
            "description": "Hash navigation parameters",
            "type": ["boolean", "object"],
            "properties": {
                "getSlideIndex": {
                    "$ref": "#/$defs/function",
                    "description": "Designed to be used with Virtual slides when it is impossible to find slide in DOM by hash (e.g. not yet rendered)"
                },
                "replaceState": {
                    "type": "boolean",
                    "description": "Works in addition to hashnav to replace current url state with the new one instead of adding it to history",
                    "default": false
                },
                "watchState": {
                    "type": "boolean",
                    "description": "Set to true to enable also navigation through slides (when hashnav is enabled) by browser history or by setting directly hash on document location",
                    "default": false
                }
            }
        },
        "history_navigation_props": {
            "description": "History navigation parameters",
            "type": ["boolean", "object"],
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enables History Plugin.",
                    "default": false
                },
                "keepQuery": {
                    "type": "boolean",
                    "description": "Keep query parameters when changing browser url.",
                    "default": false
                },
                "key": {
                    "type": "string",
                    "description": "Url key for slides",
                    "default": "slides"
                },
                "replaceState": {
                    "type": "boolean",
                    "description": "Works in addition to hashnav or history to replace current url state with the new one instead of adding it to history",
                    "default": false
                },
                "root": {
                    "type": "string",
                    "description": "Swiper page root, useful to specify when you use Swiper history mode not on root website page. For example can be https://my-website.com/ or https://my-website.com/subpage/ or /subpage/",
                    "default": ""
                }
            }
        },
        "keyboard_props": {
            "description": "Enables navigation through slides using keyboard.",
            "type": ["object", "boolean"],
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Set to true to enable keyboard control",
                    "default": false
                },
                "onlyInViewport": {
                    "type": "boolean",
                    "description": "When enabled it will control sliders that are currently in viewport",
                    "default": true
                },
                "pageUpDown": {
                    "type": "boolean",
                    "description": "When enabled it will enable keyboard navigation by Page Up and Page Down keys",
                    "default": true
                }
            }
        },
        "mode_free_props": {
            "description": "Enable free mode functionality.",
            "type": ["object", "boolean"],
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the free mode is enabled",
                    "default": false
                },
                "minimumVelocity": {
                    "type": "number",
                    "description": "Minimum touchmove-velocity required to trigger free mode momentum",
                    "default": 0.02
                },
                "momentum": {
                    "type": "boolean",
                    "description": "If enabled, then slide will keep moving for a while after you release it",
                    "default": true
                },
                "momentumBounce": {
                    "type": "boolean",
                    "description": "Set to false if you want to disable momentum bounce in free mode",
                    "default": true
                },
                "momentumBounceRatio": {
                    "type": "number",
                    "description": "Higher value produces larger momentum bounce effect",
                    "default": 1
                },
                "momentumRatio": {
                    "type": "number",
                    "description": "Higher value produces larger momentum distance after you release slider",
                    "default": 1
                },
                "momentumVelocityRatio": {
                    "type": "number",
                    "description": "Higher value produces larger momentum velocity after you release slider",
                    "default": 1
                },
                "sticky": {
                    "type": "boolean",
                    "description": "Set to enabled to enable snap to slides positions in free mode\n\n",
                    "default": false
                }
            }
        },
        "mousewheel_props": {
            "description": "Mousewheel control parameters.",
            "type": ["object", "boolean"],
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Set to true to enable mousewheel control",
                    "default": false
                },
                "eventsTarget": {
                    "type": "boolean",
                    "description": "String with CSS selector or HTML element of the container accepting mousewheel events. By default it is swiper"
                },
                "forceToAxis": {
                    "type": "boolean",
                    "description": "Set to true to force mousewheel swipes to axis. So in horizontal mode mousewheel will work only with horizontal mousewheel scrolling, and only with vertical scrolling in vertical mode.",
                    "default": false
                },
                "invert": {
                    "type": "boolean",
                    "description": "Set to true to invert sliding direction",
                    "default": false
                },
                "noMousewheelClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "Scrolling on elements with this class will be ignored"
                },
                "releaseOnEdges": {
                    "type": "boolean",
                    "description": "Set to true and swiper will release mousewheel event and allow page scrolling when swiper is on edge positions (in the beginning or in the end)",
                    "default": false
                },
                "sensitivity": {
                    "type": "number",
                    "description": "Multiplier of mousewheel data, allows to tweak mouse wheel sensitivity",
                    "default": 1
                },
                "thresholdData": {
                    "type": "number",
                    "description": "Minimum mousewheel scroll delta to trigger swiper slide change"
                },
                "thresholdTime": {
                    "type": "number",
                    "description": "Minimum mousewheel scroll time delta (in ms) to trigger swiper slide change"
                }
            }
        },
        "navigation_props": {
            "description": "Navigation parameters.",
            "type": ["object", "boolean"],
            "properties": {
                "disabledClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "CSS class name added to navigation button when it becomes disabled"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Boolean property to use with breakpoints to enable/disable navigation on certain breakpoints",
                    "default": true
                },
                "hiddenClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "CSS class name added to navigation button when it becomes hidden"
                },
                "hideOnClick": {
                    "type": "boolean",
                    "description": "Toggle navigation buttons visibility after click on Slider's container",
                    "default": false
                },
                "lockClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "CSS class name added to navigation button when it is disabled"
                },
                "navigationDisabledClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "CSS class name added on swiper container when navigation is disabled by breakpoint"
                },
                "nextEl": {
                    "type": "string",
                    "description": "String with CSS selector or HTML element of the element that will work like \"next\" button after click on it"
                },
                "prevEl": {
                    "type": "string",
                    "description": "String with CSS selector or HTML element of the element that will work like \"prev\" button after click on it"
                }
            }
        },
        "pagination_props": {
            "type": ["object", "boolean"],
            "properties": {
                "bulletActiveClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "Styles defined in the project to be applied to this component"
                },
                "bulletClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "CSS class name of single pagination bullet"
                },
                "bulletElement": {
                    "type": "string",
                    "description": "Defines which HTML tag will be used to represent single pagination bullet. Only for 'bullets' pagination type."
                },
                "clickable": {
                    "type": "boolean",
                    "description": "If true then clicking on pagination button will cause transition to appropriate slide. Only for bullets pagination type",
                    "default": true
                },
                "clickableClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "CSS class name set to pagination when it is clickable"
                },
                "currentClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "CSS class name of the element with currently active index in \"fraction\" pagination"
                },
                "dynamicBullets": {
                    "type": "boolean",
                    "description": "Good to enable if you use bullets pagination with a lot of slides. So it will keep only few bullets visible at the same time.",
                    "default": true
                },
                "dynamicMainBullets": {
                    "type": "number",
                    "description": "The number of main bullets visible when dynamicBullets enabled.",
                    "default": 1
                },
                "el": {
                    "type": "string",
                    "description": "String with CSS selector or HTML element of the container with pagination"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Boolean property to use with breakpoints to enable/disable pagination on certain breakpoints",
                    "default": true
                },
                "formatFractionCurrent": {
                    "$ref" : "#/$defs/function",
                    "description": "Format fraction pagination current number. Function receives current number, and you need to return formatted value"
                },
                "formatFractionTotal": {
                    "$ref" : "#/$defs/function",
                    "description": "Format fraction pagination total number. Function receives current number, and you need to return formatted value"
                },
                "hiddenClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "CSS class name of pagination when it becomes inactive"
                },
                "hideOnClick": {
                    "type": "boolean",
                    "description": "Toggle (hide/show) pagination container visibility after click on Slider's container",
                    "default": true
                },
                "horizontalClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "CSS class name set to pagination in horizontal Swiper"
                },
                "lockClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "CSS class name set to pagination when it is disabled"
                },
                "modifierClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "The beginning of the modifier CSS class name that will be added to pagination depending on parameters"
                },
                "paginationDisabledClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "CSS class name added on swiper container and pagination element when pagination is disabled by breakpoint"
                },
                "progressbarFillClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "CSS class name of pagination progressbar fill element"
                },
                "progressbarOpposite": {
                    "type": "boolean",
                    "description": "Makes pagination progressbar opposite to Swiper's direction parameter, means vertical progressbar for horizontal swiper direction and horizontal progressbar for vertical swiper direction"
                },
                "progressbarOppositeClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "CSS class name of pagination progressbar opposite"
                },
                "renderBullet": {
                    "$ref" : "#/$defs/function",
                    "description": "This parameter allows totally customize pagination bullets, you need to pass here a function that accepts index number of pagination bullet and required element class name (className). Only for 'bullets' pagination type"
                },
                "renderCustom": {
                    "$ref" : "#/$defs/function",
                    "description": "This parameter is required for 'custom' pagination type where you have to specify how it should be rendered."
                },
                "renderFraction": {
                    "$ref" : "#/$defs/function",
                    "description": "This parameter allows to customize \"fraction\" pagination html. Only for 'fraction' pagination type"
                },
                "renderProgressbar": {
                    "$ref" : "#/$defs/function",
                    "description": "This parameter allows to customize \"progress\" pagination. Only for 'progress' pagination type"
                },
                "totalClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "CSS class name of the element with total number of \"snaps\" in \"fraction\" pagination"
                },
                "type": {
                    "type": "string",
                    "description": "String with type of pagination. Can be 'bullets', 'fraction', 'progressbar' or 'custom'",
                    "default": "bullets",
                    "enum": [
                        "bullets",
                        "fraction",
                        "progressbar",
                        "custom"
                    ]
                },
                "verticalClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "CSS class name set to pagination in vertical Swiper"
                }
            }
        },
        "parallax_props": {
            "type": ["object", "boolean"],
            "description": "Parallax properties.",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable, if you want to use \"parallaxed\" elements inside of slider",
                    "default": false
                }
            }
        },
        "scrollbar_props": {
            "type": ["object", "boolean"],
            "description": "Scroll bar properties.",
            "properties": {
                "dragClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "Scrollbar draggable element CSS class"
                },
                "dragSize": {
                    "type": ["number", "string"],
                    "default": "auto",
                    "description": "Size of scrollbar draggable element in px"
                },
                "draggable": {
                    "type": "boolean",
                    "default": false,
                    "description": "Set to true to enable draggable scrollbar, allowing control of slider position"
                },
                "el": {
                    "type": "any",
                    "description": "String with CSS selector or HTML element of the container with scrollbar"
                },
                "enabled": {
                    "type": "boolean",
                    "default": "true",
                    "description": "Boolean property to use with breakpoints to enable/disable scrollbar on certain breakpoints"
                },
                "hide": {
                    "type": "boolean",
                    "default": true,
                    "description": "Hide scrollbar automatically after user interaction"
                },
                "horizontalClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "CSS class name set to scrollbar in horizontal Swiper"
                },
                "lockClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "Scrollbar element additional CSS class when it is disabled"
                },
                "scrollbarDisabledClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "CSS class name added on swiper container and scrollbar element when scrollbar is disabled by breakpoint"
                },
                "snapOnRelease": {
                    "type": "boolean",
                    "default": false,
                    "description": "Set to true to snap slider position to slides when you release the scrollbar"
                },
                "verticalClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "CSS class name set to scrollbar in vertical Swiper"
                }
            }
        },
        "zoom_props": {
            "type": ["object", "boolean"],
            "description": "Swiper supports zoom images functionality (similar to what you see on iOS when browsing single photo) where you can zoom-in image by pinch gesture and or by zoom-in/out by double tap on it.",
            "properties": {
                "containerClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "CSS class name of zoom container"
                },
                "limitToOriginalSize": {
                    "type": "boolean",
                    "default": false,
                    "description": "When set to true, the image will not be scaled past 100% of its original size"
                },
                "maxRatio": {
                    "type": "number",
                    "default": 3,
                    "description": "Maximum image zoom multiplier"
                },
                "minRatio": {
                    "type": "number",
                    "default": 1,
                    "description": "Minimal image zoom multiplier"
                },
                "toggle": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable/disable zoom-in by slide's double tap"
                },
                "zoomedSlideClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "default": "swiper-slide-zoomed",
                    "description": "CSS class name of zoomed in container"
                }
            }
        }
    },
    "properties": {
        "instances": {
            "type": "array",
            "description": "Array of slide instances.",
            "default": [],
            "items": {
                "$ref": "#/$defs/embedded_view_config"
            }
        },
        "instanceCommon": {
            "$ref": "#/$defs/embedded_view_config",
            "description": "Properties shared between all instances.",
            "default": {
                "viewParams": {},
                "viewStyle": { "classes":  "" },
                "slideStyle": { "classes":  "" }
            }
        },
        "settings": {
            "type": "object",
            "properties": {
                "a11y": {
                    "$ref": "#/$defs/a11y_props"
                },
                "allowSlideNext": {
                    "type": "boolean",
                    "description": "Set to false to disable swiping to next slide direction (to right or bottom)"
                },
                "allowSlidePrev": {
                    "type": "boolean",
                    "description": "Set to false to disable swiping to previous slide direction (to left or top)"
                },
                "allowTouchMove": {
                    "type": "boolean",
                    "description": "If false, then the only way to switch the slide is use of external API functions like slidePrev or slideNext"
                },
                "autoHeight": {
                    "type": "boolean",
                    "description": "Set to true and slider wrapper will adapt its height to the height of the currently active slide",
                    "default": false
                },
                "autoplay": {
                    "$ref": "#/$defs/autoplay_props",
                    "default": false
                },
                "breakpoints": {
                    "type": "object",
                    "description": "Allows to set different parameter for different responsive breakpoints (screen sizes)."
                },
                "breakpointsBase": {
                    "$ref": "#/$defs/breakpoint_base"
                },
                "cardsEffect": {
                    "$ref": "#/$defs/effect_cards_props",
                    "visibleWhen": {
                        "property": "effect",
                        "equals": "cards"
                    }
                },
                "centerInsufficientSlides": {
                    "type": "boolean",
                    "description": "When enabled it center slides if the amount of slides less than slidesPerView. Not intended to be used loop mode and grid.rows"
                },
                "centeredSlides": {
                    "type": "boolean",
                    "default": false,
                    "description": "If true, then active slide will be centered, not always on the left side."
                },
                "centeredSlidesBounds": {
                    "type": "boolean",
                    "default": false,
                    "description": "If true, then active slide will be centered without adding gaps at the beginning and end of slider. Required centeredSlides: true. Not intended to be used with loop or pagination"
                },
                "containerModifierClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "The beginning of the modifier CSS class that can be added to swiper container depending on different parameters"
                },
                "controller": {
                    "$ref": "#/$defs/controller_props",
                    "default": false
                },
                "coverflowEffect": {
                    "$ref": "#/$defs/effect_coverflow_props",
                    "visibleWhen": {
                        "property": "effect",
                        "equals": "coverflow"
                    }
                },
                "createElements": {
                    "type": "boolean",
                    "description": "When enabled Swiper will automatically wrap slides with swiper-wrapper element, and will create required elements for navigation, pagination and scrollbar they are enabled (with their respective params object or with boolean true))"
                },
                "creativeEffect": {
                    "$ref": "#/$defs/effect_creative_props",
                    "visibleWhen": {
                        "property": "effect",
                        "equals": "creative"
                    }
                },
                "cssMode": {
                    "type": "boolean",
                    "description": "When enabled it will use modern CSS Scroll Snap API. It doesn't support all of Swiper's features, but potentially should bring a much better performance in simple configurations."
                },
                "cubeEffect": {
                    "$ref": "#/$defs/effect_cube_props",
                    "visibleWhen": {
                        "property": "effect",
                        "equals": "cuve"
                    }
                },
                "direction": {
                    "$ref": "#/$defs/direction",
                    "default": "horizontal"
                },
                "edgeSwipeDetection": {
                    "type": ["string", "boolean"],
                    "description": "Enable to release Swiper events for swipe-back work in app. If set to 'prevent' then it will prevent system swipe-back navigation instead. This feature works only with \"touch\" events (and not pointer events), so it will work on iOS/Android devices and won't work on Windows devices with pointer (touch) events."
                },
                "edgeSwipeThreshold": {
                    "type": "number",
                    "description": "Area (in px) from left edge of the screen to release touch events for swipe-back in app"
                },
                "effect": {
                    "$ref": "#/$defs/effect",
                    "default": "slide"
                },
                "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether Swiper initially enabled. When Swiper is disabled, it will hide all navigation elements and won't respond to any events and interactions"
                },
                "eventsPrefix": {
                    "type": "string",
                    "description": "Event name prefix for all DOM events emitted by Swiper Element (web component)"
                },
                "fadeEffect": {
                    "$ref": "#/$defs/effect_fade_props",
                    "visibleWhen": {
                        "property": "effect",
                        "equals": "fade"
                    }
                },
                "flipEffect": {
                    "$ref": "#/$defs/effect_flip_props",
                    "visibleWhen": {
                        "property": "effect",
                        "equals": "flip"
                    }
                },
                "focusableElements": {
                    "type": "string",
                    "description": "CSS selector for focusable elements. Swiping will be disabled on such elements if they are \"focused\""
                },
                "followFinger": {
                    "type": "boolean",
                    "default": true,
                    "description": "If disabled, then slider will be animated only when you release it, it will not move while you hold your finger on it"
                },
                "freeMode": {
                    "$ref": "#/$defs/mode_free_props"
                },
                "grabCursor": {
                    "type": "boolean",
                    "default": false,
                    "description": "This option may a little improve desktop usability. If true, user will see the \"grab\" cursor when hover on Swiper"
                },
                "grid": {
                    "$ref": "#/$defs/grid_props"
                },
                "hashNavigation": {
                    "$ref": "#/$defs/hash_navigation_props"
                },
                "height": {
                    "type": ["null", "number"],
                    "description": "Swiper height (in px). Parameter allows to force Swiper height. "
                },
                "history": {
                    "$ref": "#/$defs/history_navigation_props"
                },
                "initialSlide": {
                    "type": "number",
                    "default": 0,
                    "description": "Index number of initial slide."
                },
                "keyboard": {
                    "$ref": "#/$defs/keyboard_props",
                    "description": "Enables navigation through slides using keyboard."
                },
                "lazyPreloadPrevNext": {
                    "type": "number",
                    "description": "Number of next and previous slides to preload. Only applicable if using lazy loading."
                },
                "lazyPreloaderClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "CSS class name of lazy preloader"
                },
                "longSwipes": {
                    "type": "boolean",
                    "description": "Set to false if you want to disable long swipes"
                },
                "longSwipesMs": {
                    "type": "number",
                    "description": "Minimal duration (in ms) to trigger swipe to next/previous slide during long swipes"
                },
                "longSwipesRatio": {
                    "type": "number",
                    "description": "Ratio to trigger swipe to next/previous slide during long swipes"
                },
                "loop": {
                    "type": "boolean",
                    "description": "Set to true to enable continuous loop mode\n\nBecause of nature of how the loop mode works (it will rearrange slides), total number of slides must be:\n\nmore than or equal to slidesPerView + slidesPerGroup\neven to slidesPerGroup (or use loopAddBlankSlides parameter)\neven to grid.rows (or use loopAddBlankSlides parameter)",
                    "default": false
                },
                "loopAddBlankSlides": {
                    "type": "boolean",
                    "description": "Automatically adds blank slides if you use Grid or slidesPerGroup and the total amount of slides is not even to slidesPerGroup or to grid.rows"
                },
                "loopAdditionalSlides": {
                    "type": "boolean",
                    "description": "Allows to increase amount of looped slides"
                },
                "loopPreventsSliding": {
                    "type": "boolean",
                    "description": "If enabled then slideNext/Prev will do nothing while slider is animating in loop mode"
                },
                "maxBackfaceHiddenSlides": {
                    "type": "number",
                    "description": "If total number of slides less than specified here value, then Swiper will enable backface-visibility: hidden on slide elements to reduce visual \"flicker\" in Safari."
                },
                "mousewheel": {
                    "$ref": "#/$defs/mousewheel_props",
                    "description": "Enables navigation through slides using mouse wheel."
                },
                "navigation": {
                    "$ref": "#/$defs/navigation_props"
                },
                "nested": {
                    "type": "boolean",
                    "description": "Set to true on Swiper for correct touch events interception. Use only on swipers that use same direction as the parent one"
                },
                "noSwiping": {
                    "type": "boolean",
                    "description": "Enable/disable swiping on elements matched to class specified in noSwipingClass"
                },
                "noSwipingClass": {
                    "type": ["array", "string"],
                    "format": "style-list",
                    "description": "Specify noSwiping's element css class"
                },
                "noSwipingSelector": {
                    "type": "string",
                    "description": "Can be used instead of noSwipingClass to specify elements to disable swiping on. For example 'input' will disable swiping on all inputs"
                },
                "normalizeSlideIndex": {
                    "type": "boolean",
                    "description": "Normalize slide index."
                },
                "onAny": {
                    "$ref": "#/$defs/function",
                    "description": "Add event listener that will be fired on all events"
                },
                "oneWayMovement": {
                    "type": "boolean",
                    "description": "When enabled, will swipe slides only forward (one-way) regardless of swipe direction"
                },
                "pagination": {
                    "$ref": "#/$defs/pagination_props",
                    "description": "Pagination parameters."
                },
                "parallax": {
                    "$ref": "#/$defs/parallax_props",
                    "description": "Parallax parameters."
                },
                "passiveListeners": {
                    "type": "boolean",
                    "description": "Passive event listeners will be used by default where possible to improve scrolling performance on mobile devices. But if you need to use e.preventDefault and you have conflict with it, then you should disable this parameter"
                },
                "preventClicks": {
                    "type": "boolean",
                    "description": "Set to true to prevent accidental unwanted clicks on links during swiping"
                },
                "preventClicksPropagation": {
                    "type": "boolean",
                    "description": "Set to true to stop clicks event propagation on links during swiping"
                },
                "preventInteractionOnTransition": {
                    "type": "boolean",
                    "description": "When enabled it won't allow to change slides by swiping or navigation/pagination buttons during transition"
                },
                "resistance": {
                    "type": "boolean",
                    "description": "Set to false if you want to disable resistant bounds"
                },
                "resistanceRatio": {
                    "type": "number",
                    "description": "This option allows you to control resistance ratio"
                },
                "resizeObserver": {
                    "type": "boolean",
                    "description": "When enabled it will use ResizeObserver (if supported by browser) on swiper container to detect container resize (instead of watching for window resize)"
                },
                "rewind": {
                    "type": "boolean",
                    "default": false,
                    "description": "Set to true to enable 'rewind' mode. When enabled, clicking 'next' navigation button (or calling .slideNext()) when on last slide will slide back to the first slide. Clicking 'prev' navigation button (or calling .slidePrev()) when on first slide will slide forward to the last slide. Should not be used together with loop mode"
                },
                "roundLengths": {
                    "type": "boolean",
                    "default": false,
                    "description": "Set to true to round values of slides width and height to prevent blurry texts on usual resolution screens (if you have such)"
                },
                "runCallbacksOnInit": {
                    "type": "boolean",
                    "description": "Fire Transition/SlideChange/Start/End events on swiper initialization. Such events will be fired on initialization in case of your initialSlide is not 0, or you use loop mode"
                },
                "setWrapperSize": {
                    "type": "boolean",
                    "description": "Enabled this option and plugin will set width/height on swiper wrapper equal to total size of all slides. Mostly should be used as compatibility fallback option for browser that don't support flexbox layout well"
                },
                "shortSwipes": {
                    "type": "boolean",
                    "description": "Set to false if you want to disable short swipes"
                },
                "simulateTouch": {
                    "type": "boolean",
                    "default": true,
                    "description": "If true, Swiper will accept mouse events like touch events (click and drag to change slides)"
                },
                "slideToClickedSlide": {
                    "type": "boolean",
                    "default": false,
                    "description": "Set to true and click on any slide will produce transition to this slide"
                },
                "slidesOffsetAfter": {
                    "type": "number",
                    "description": "Add (in px) additional slide offset at the end of the container (after all slides)"
                },
                "slidesOffsetBefore": {
                    "type": "number",
                    "description": "Add (in px) additional slide offset at the beginning of the container (before all slides)"
                },
                "slidesPerGroup": {
                    "type": "number",
                    "default": 1,
                    "description": "Set the number of slides to define and enable group sliding. Useful to use with slidesPerView > 1"
                },
                "slidesPerGroupAuto": {
                    "type": "boolean",
                    "description": "This param is intended to be used only with slidesPerView: 'auto' and slidesPerGroup: 1. When enabled, it will skip all slides in view on .slideNext() & .slidePrev() method calls, on Navigation 'buttons' clicks and in autoplay"
                },
                "slidesPerGroupSkip": {
                    "type": "number",
                    "description": "If slidesPerGroupSkip equals 0 (default), no slides are excluded from grouping, and the resulting behavior is the same as without this change. If slidesPerGroupSkip is equal or greater than 1, the first X slides are treated as single groups, whereas all following slides are grouped by the slidesPerGroup value"
                },
                "slidesPerView": {
                    "type": ["number", "string"],
                    "default": 1,
                    "description": "Number of slides per view (slides visible at the same time on the slider's container). slidesPerView: 'auto' is currently not compatible with multirow mode when grid.rows > 1"
                },
                "spaceBetween": {
                    "type": ["string", "number"],
                    "default": 0,
                    "description": "Distance between slides in px. If you use 'margin' CSS property on elements in Swiper, navigation might not work properly"
                },
                "speed": {
                    "type": "number",
                    "default": 300,
                    "description": "Duration of transition between slides (in ms)"
                },
                "swipeHandler": {
                    "type": "string",
                    "description": "String with CSS selector or HTML element of the container with pagination that will work as the only available handler for swiping"
                },
                "swiperElementNodeName": {
                    "type": "string",
                    "description": "The name of the swiper element node name; used for detecting web component rendering"
                },
                "threshold": {
                    "type": "number",
                    "description": "Threshold value in px. If 'touch distance' will be lower than this value, then swiper will not move"
                },
                "touchAngle": {
                    "type": "number",
                    "description": "Allowable angle (in degrees) to trigger touch move"
                },
                "touchEventsTarget": {
                    "type": "string",
                    "enum": ["container", "wrapper"],
                    "description": "Target element to listen for touch events on. Can be 'container' (to listen for touch events on swiper) or 'wrapper' (to listen for touch events on swiper-wrapper)"
                },
                "touchMoveStopPropagation": {
                    "type": "boolean",
                    "description": "If enabled, then propagation of 'touchmove' will be stopped"
                },
                "touchRatio": {
                    "type": "number",
                    "description": "Touch ratio"
                },
                "touchReleaseOnEdges": {
                    "type": "boolean",
                    "description": "Enable to release touch events on slider edge position (beginning, end) to allow for further page scrolling. This feature works only with 'touch' events, so it will work on iOS/Android devices and won't work on Windows devices with pointer events. Also, the threshold parameter must be set to 0"
                },
                "touchStartForcePreventDefault": {
                    "type": "boolean",
                    "description": "Force to always prevent default for touchstart (pointerdown) event"
                },
                "touchStartPreventDefault": {
                    "type": "boolean",
                    "description": "If disabled, pointerdown event won't be prevented"
                },
                "uniqueNavElements": {
                    "type": "boolean",
                    "description": "If enabled and navigation elements' parameters are passed as a string (like '.pagination'), Swiper will look for such elements through child elements first. Applies for pagination, prev/next buttons, and scrollbar elements"
                },
                "updateOnWindowResize": {
                    "type": "boolean",
                    "description": "Swiper will recalculate slide positions on window resize (orientation change)"
                },
                "url": {
                    "type": ["null", "string"],
                    "description": "Required for active slide detection when rendered on server-side and history is enabled"
                },
                "userAgent": {
                    "type": ["null", "string"],
                    "description": "UserAgent string. Required for browser/device detection when rendered on server-side"
                },
                "virtual": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enables virtual slides functionality. Object with virtual slides parameters or boolean true to enable with default settings"
                },
                "virtualTranslate": {
                    "type": "boolean",
                    "description": "When enabled, swiper will operate as usual except it will not move. Real translate values on the wrapper will not be set. Useful for creating custom slide transitions"
                },
                "watchOverflow": {
                    "type": "boolean",
                    "description": "When enabled, Swiper will be disabled and hide navigation buttons when there are not enough slides for sliding"
                },
                "watchSlidesProgress": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable this feature to calculate each slide's progress and visibility (slides in the viewport will have an additional visible class)"
                },
                "width": {
                    "type": ["null", "number"],
                    "description": "Swiper width (in px). Allows forcing Swiper width. Useful when initializing Swiper when hidden or in SSR/Test environments"
                },
                "zoom": {
                    "$ref": "#/$defs/zoom_props",
                    "description": "Enables zooming functionality. Object with zoom parameters or boolean true to enable with default settings"
                }
            }
        },
        "style": {
            "$ref": "urn:ignition-schema:schemas/style-properties.schema.json",
            "default": {
                "classes": ""
            }
        }
    },
    "type": "object",
    "required": ["instances"]
}