{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$defs": {
        "align": {
            "enum": [ "start", "center", "end" ],
            "type": "string"
        },
        "animation": {
            "type": ["object", "boolean"],
            "properties": {
                "duration": {
                    "default": 1000,
                    "description": "The number of milliseconds an animation takes.",
                    "type": "number"
                },
                "easing": {
                    "default": "easeOutQuart",
                    "description": "Easing function to use.",
                    "$ref": "#/$defs/easing"
                },
                "delay": {
                    "default": 0,
                    "description": "Delay before starting the animations.",
                    "type": "number"
                },
                "loop": {
                    "default": false,
                    "description": "If set to true, the animations loop endlessly.",
                    "type": "boolean"
                }
            }
        },
        "animation_configuration": {
            "type": "object",
            "properties": {
                "properties": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [],
                    "description": "The property names this configuration applies to. Defaults to the key name of this object."
                },
                "type": {
                    "type": "string",
                    "description": "Type of property, determines the interpolator used. Possible values: 'number', 'color' and 'boolean'. Only really needed for 'color', because typeof does not get that right.",
                    "default": "color",
                    "enum": [
                        "number",
                        "color",
                        "boolean"
                    ]
                },
                "from": {
                    "type": [ "number", "string", "boolean" ],
                    "default": null,
                    "description": "Start value for the animation. Current value is used when undefined."
                },
                "to": {
                    "type": [ "number", "string", "boolean" ],
                    "default": null,
                    "description": "End value for the animation. Updated value is used when undefined."
                }
            }
        },
        "animations": {
            "type": "object",
            "default": {
                "numbers": {
                    "properties": ["x", "y", "borderWidth", "radius", "tension"],
                    "type": "number"
                },
                "colors": {
                    "properties": [
                        "color", "borderColor", "backgroundColor"
                    ],
                    "type": "color"
                }
            },
            "properties": {
                "numbers": {
                    "$ref": "#/$defs/animation_configuration"
                },
                "colors": {
                    "$ref": "#/$defs/animation_configuration"
                }
            }
        },
        "area_fill": {
            "type": ["string", "number", "boolean", "object"],
            "default": false,
            "suggestions": [
                false,
                "origin",
                "stack",
                "start",
                "end",
                1,
                "+1"
            ]
        },
        "axis": {
            "type": "string",
            "suggestions": ["x", "y", "xy", "r"]
        },
        "border": {
            "type": ["string", "boolean"],
            "suggestions": [
                "start",
                "end",
                "middle",
                "bottom",
                "left",
                "top",
                "right",
                false
            ]
        },
        "chart_area": {
            "type": "object",
            "properties": {
                "top": {
                    "type": "number"
                },
                "left": {
                    "type": "number"
                },
                "right": {
                    "type": "number"
                },
                "bottom": {
                    "type": "number"
                },
                "width": {
                    "type": "number"
                },
                "height": {
                    "type": "number"
                }
            }
        },
        "chart_data": {
            "default": {
                "labels": [],
                "datasets": []
            },
            "type": "object",
            "properties": {
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "xLabels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "yLabels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "datasets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/dataset"
                    }
                }
            }
        },
        "chart_event": {
            "type": "string",
            "default": ""
        },
        "chart_events": {
            "description": "JavaScript chart events. The `chart` object is provided.",
            "properties": {
                "beforeRender": {
                    "description": "Runs before the chart renders.",
                    "$ref": "#/$defs/chart_event"
                }
            },
            "default": {}
        },
        "chart_options": {
            "type": "object",
            "properties": {
                "animation": {
                    "description": "Chart animation options.",
                    "$ref": "#/$defs/animation"
                },
                "animations": {
                    "default": {
                        "numbers": {
                            "properties": [ "x", "y", "borderWidth", "radius", "tension" ],
                            "type": "number"
                        },
                        "colors": {
                            "properties": [ "color", "borderColor", "backgroundColor" ],
                            "type": "color"
                        }
                    },
                    "description": "Animations options configures which element properties are animated and how.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/$defs/animations"
                    }
                },
                "aspectRatio": {
                    "description": "Canvas aspect ratio (i.e. width / height, a value of 1 representing a square canvas). Note that this option is ignored if the height is explicitly defined either as attribute or via the style.",
                    "type": "number"
                },
                "backgroundColor": {
                    "description": "Base background color",
                    "$ref": "#/$defs/color"
                },
                "borderColor": {
                    "description": "Base border color",
                    "$ref": "#/$defs/color"
                },
                "clip": {
                    "description": "How to clip relative to chartArea. Positive value allows overflow, negative value clips that many pixels inside chartArea. 0 = clip at chartArea. Clipping can also be configured per side: `clip: {left: 5, top: false, right: -2, bottom: 0}`",
                    "anyOf": [
                        {"type":  "number"},
                        {"type":  "boolean"},
                        {"$ref":  "#/$defs/chart_area"}
                    ]
                },
                "color": {
                    "description": "Base color",
                    "$ref": "#/$defs/color"
                },
                "devicePixelRatio": {
                    "description": "Override the window's default devicePixelRatio.",
                    "type": "number"
                },
                "elements": {
                    "$ref": "#/$defs/elements"
                },
                "events": {
                    "type": "array",
                    "items": "string",
                    "description": "The events option defines the browser events that the chart should listen to for tooltips and hovering.",
                    "default": ["mousemove", "mouseout", "click", "touchstart", "touchmove"]
                },
                "font": {
                    "description": "Base font",
                    "$ref": "#/$defs/font"
                },
                "indexAxis": {
                    "description": "The base axis of the chart. 'x' for vertical charts and 'y' for horizontal charts.",
                    "$ref": "#/$defs/axis"
                },
                "interaction": {
                    "$ref": "#/$defs/interaction"
                },
                "layout": {
                    "$ref": "#/$defs/layout"
                },
                "locale": {
                    "description": "Locale used for number formatting (using `Intl.NumberFormat`).",
                    "type": "string"
                },
                "maintainAspectRatio": {
                    "default": false,
                    "description": "Maintain the original canvas aspect ratio (width / height) when resizing.",
                    "type": "boolean"
                },
                "normalized": {
                    "type": "boolean",
                    "default": true,
                    "description": "Chart.js is fastest if you provide data with indices that are unique, sorted, and consistent across datasets and provide the normalized: true option to let Chart.js know that you have done so."
                },
                "onClick": {
                    "description": "Called if the event is of type 'mouseup', 'click' or 'contextmenu' over chartArea. Passed the event, an array of active elements, and the chart.",
                    "$ref": "#/$defs/function"
                },
                "onHover": {
                    "description": "Called when any of the events fire over chartArea. Passed the event, an array of active elements (bars, points, etc), and the chart.",
                    "$ref": "#/$defs/function"
                },
                "onResize": {
                    "description": "Called when a resize occurs. Gets passed two arguments: the chart instance and the new size.",
                    "$ref": "#/$defs/function"
                },
                "parsing": {
                    "type": ["boolean", "object"],
                    "default": true,
                    "description": "How to parse the dataset. The parsing can be disabled by specifying parsing: false at chart options or dataset. If parsing is disabled, data must be sorted and in the formats the associated chart type and scales use internally."
                },
                "plugins": {
                    "description": "Chart plugin options.",
                    "$ref": "#/$defs/plugins_options"
                },
                "resizeDelay": {
                    "default": 0,
                    "description": "Delay the resize update by give amount of milliseconds. This can ease the resize process by debouncing update of the elements.",
                    "type": "number"
                },
                "responsive": {
                    "default": true,
                    "description": "Resizes the chart canvas when its container does.",
                    "type": "boolean"
                },
                "scales": {
                    "default": {},
                    "description": "Chart scale options.",
                    "type": "object",
                    "properties": {
                        "x": {
                            "required": false,
                            "$ref": "#/$defs/scale_options"
                        },
                        "y": {
                            "required": false,
                            "$ref": "#/$defs/scale_options"
                        }
                    }
                },
                "showLine": {
                    "type": "boolean",
                    "description": "If false, the lines between points are not drawn."
                },
                "spanGaps": {
                    "type": "boolean",
                    "description": "If true, lines will be drawn between points with no or null data. If false, points with NaN data will create a break in the line. Can also be a number specifying the maximum gap length to span. The unit of the value depends on the scale used."
                },
                "transitions": {
                    "$ref": "#/$defs/transitions"
                }
            }
        },
        "chart_plugins": {
            "type": "array",
            "default": [],
            "items": {
                "$ref": "#/$defs/plugin"
            }
        },
        "chart_type": {
            "default": "line",
            "description": "Chart type.",
            "suggestions": [
                "bar",
                "boxplot",
                "bubble",
                "dendrogram",
                "doughnut",
                "euler",
                "forceDirectedGraph",
                "funnel",
                "graph",
                "line",
                "matrix",
                "pcp",
                "pie",
                "polarArea",
                "radar",
                "scatter",
                "sankey",
                "tree",
                "treemap",
                "venn",
                "violin",
                "wordCloud"
            ],
            "type": "string"
        },
        "clip": {
            "description": "How to clip relative to chartArea. Positive value allows overflow, negative value clips that many pixels inside chartArea. 0 = clip at chartArea. Clipping can also be configured per side: `clip: {left: 5, top: false, right: -2, bottom: 0}`",
            "type": ["number", "boolean", "object"],
            "$ref":  "#/$defs/chart_area"
        },
        "color": {
            "type": ["string", "null"],
            "format": "color"
        },
        "dataset": {
            "type": "object",
            "properties": {
                "animation": {
                    "description": "Dataset animation options.",
                    "$ref": "#/$defs/animation"
                },
                "animations": {
                    "description": "Animations options configures which element properties are animated and how.",
                    "type": "object",
                    "$ref": "#/$defs/animations"
                },
                "backgroundColor": {
                    "description": "Line fill color.",
                    "$ref": "#/$defs/color"
                },
                "borderWidth": {
                    "type": "number",
                    "description": "Line stroke width."
                },
                "borderColor": {
                    "description": "Line stroke color.",
                    "$ref": "#/$defs/color"
                },
                "borderCapStyle": {
                    "description": "Line cap style.",
                    "$ref": "#/$defs/line_cap"
                },
                "borderDash": {
                    "description": "Line cap style.",
                    "$ref": "#/$defs/line_dash"
                },
                "borderDashOffset": {
                    "type": "number",
                    "description": "Line dash offset."
                },
                "borderJoinStyle": {
                    "description": "Line join style.",
                    "$ref": "#/$defs/line_join"
                },
                "capBezierPoints": {
                    "type": "boolean",
                    "description": "`true` to keep Bézier control inside the chart, `false` for no restriction."
                },
                "clip": {
                    "$ref":  "#/$defs/clip"
                },
                "cubicInterpolationMode": {
                    "description": "Line join style.",
                    "$ref": "#/$defs/interpolation_cubic_mode"
                },
                "data": {
                    "type": "array",
                    "default": [],
                    "description": "Dataset data.",
                    "required": true,
                    "items": {
                        "$ref": "#/$defs/dataset_data"
                    }
                },
                "fill": {
                    "description": "How to fill the area under the line.",
                    "$ref": "#/$defs/area_fill"
                },
                "hidden": {
                    "type": "boolean",
                    "default": false,
                    "description": "Configure the visibility of the dataset. Using hidden: true will hide the dataset from being rendered in the Chart."
                },
                "indexAxis": {
                    "description": "The base axis of the dataset. 'x' for vertical charts and 'y' for horizontal charts.",
                    "$ref": "#/$defs/axis"
                },
                "label": {
                    "type": "string",
                    "default": "Dataset",
                    "description": "The label for the dataset which appears in the legend and tooltips."
                },
                "normalized": {
                    "type": "boolean",
                    "description": "Chart.js is fastest if you provide data with indices that are unique, sorted, and consistent across datasets and provide the normalized: true option to let Chart.js know that you have done so."
                },
                "order": {
                    "type": "number",
                    "description": "The drawing order of dataset. Also affects order for stacking, tooltip and legend."
                },
                "parsing": {
                    "type": ["boolean", "object"],
                    "description": "How to parse the dataset. The parsing can be disabled by specifying parsing: false at chart options or dataset. If parsing is disabled, data must be sorted and in the formats the associated chart type and scales use internally."
                },
                "pointBackgroundColor": {
                    "description": "Point fill color.",
                    "$ref": "#/$defs/color"
                },
                "pointBorderColor": {
                    "description": "Point stroke color.",
                    "$ref": "#/$defs/color"
                },
                "pointBorderWidth": {
                    "type": "number",
                    "description": "Point stroke width."
                },
                "pointHitRadius": {
                    "type": "number",
                    "description": "Extra radius added to point radius for hit detection."
                },
                "pointHoverBorderWidth": {
                    "type": "number",
                    "description": "Point stroke width when hovered."
                },
                "pointHoverRadius": {
                    "type": "number",
                    "description": "Point radius when hovered"
                },
                "pointRadius": {
                    "type": "number",
                    "description": "Point radius."
                },
                "pointRotation": {
                    "type": "number",
                    "description": "Point rotation (in degrees)."
                },
                "pointStyle": {
                    "$ref": "#/$defs/point_style",
                    "default": "circle",
                    "description": "Point style."
                },
                "segment": {
                    "type": "object"
                },
                "showLine": {
                    "type": "boolean"
                },
                "spanGaps": {
                    "type": ["number", "boolean"],
                    "description": "If true, lines will be drawn between points with no or null data. If false, points with NaN data will create a break in the line. Can also be a number specifying the maximum gap length to span. The unit of the value depends on the scale used."
                },
                "stack": {
                    "type": "string",
                    "description": "The ID of the group to which this dataset belongs to (when stacked, each group will be a separate stack). Defaults to dataset type."
                },
                "stepped": {
                    "type": "boolean",
                    "description": "true to show the line as a stepped line (tension will be ignored)."
                },
                "tension": {
                    "type": "number",
                    "description": "Bézier curve tension (0 for no Bézier curves)."
                },
                "type": {
                    "$ref": "#/$defs/chart_type"
                },
                "xAxisID": {
                    "type": "string",
                    "description": "The ID of the x axis to plot this dataset on."
                },
                "yAxisID": {
                    "type": "string",
                    "description": "The ID of the y axis to plot this dataset on."
                }
            }
        },
        "dataset_data": {
            "type": ["object", "number", "string", "array"],
            "default": {
                "x": null,
                "y": null
            },
            "description": "Data entry.",
            "additionalProperties": {
                "$ref": "#/$defs/dataset_data_key"
            },
            "properties": {
                "x": {
                    "required": false,
                    "$ref": "#/$defs/dataset_data_key"
                },
                "y": {
                    "required": false,
                    "$ref": "#/$defs/dataset_data_key"
                }
            }
        },
        "dataset_data_key": {
            "type": ["number", "string", "null", "object", "array"],
            "default": null,
            "description": "Data value."
        },
        "easing": {
            "description": "Easing function to use.",
            "enum": [
                "linear",
                "easeInQuad",
                "easeOutQuad",
                "easeInOutQuad",
                "easeInCubic",
                "easeOutCubic",
                "easeInOutCubic",
                "easeInQuart",
                "easeOutQuart",
                "easeInOutQuart",
                "easeInQuint",
                "easeOutQuint",
                "easeInOutQuint",
                "easeInSine",
                "easeOutSine",
                "easeInOutSine",
                "easeInExpo",
                "easeOutExpo",
                "easeInOutExpo",
                "easeInCirc",
                "easeOutCirc",
                "easeInOutCirc",
                "easeInElastic",
                "easeOutElastic",
                "easeInOutElastic",
                "easeInBack",
                "easeOutBack",
                "easeInOutBack",
                "easeInBounce",
                "easeOutBounce",
                "easeInOutBounce"
            ],
            "type": "string"
        },
        "elements": {
            "type": "object",
            "properties": {
                "point": {
                    "$ref": "#/$defs/elements_point"
                },
                "line": {
                    "$ref": "#/$defs/elements_line"
                },
                "bar": {
                    "$ref": "#/$defs/elements_bar"
                },
                "arc": {
                    "$ref": "#/$defs/elements_arc"
                }
            }
        },
        "elements_arc": {
            "type": "object",
            "description": "Arcs are used in the polar area, doughnut and pie charts.",
            "default": {},
            "properties": {
                "angle": {
                    "type": ["number", "null"],
                    "default": null,
                    "description": "Arc angle to cover."
                },
                "backgroundColor": {
                    "description": "Arc fill color.",
                    "$ref": "#/$defs/color"
                },
                "borderAlign": {
                    "type": "string",
                    "description": "Arc stroke alignment",
                    "default": "center",
                    "enum": [
                        "center",
                        "inner"
                    ]
                },
                "borderColor": {
                    "description": "Arc stroke color.",
                    "$ref": "#/$defs/color",
                    "default": "#ffffff"
                },
                "borderDash": {
                    "description": "Arc line style.",
                    "$ref": "#/$defs/line_dash",
                    "default": []
                },
                "borderDashOffset": {
                    "type": "number",
                    "description": "Arc line dash offset.",
                    "default": 0.0
                },
                "borderJoinStyle": {
                    "description": "Line join style.",
                    "$ref": "#/$defs/line_join",
                    "default": "miter"
                },
                "borderWidth": {
                    "type": "number",
                    "default": 2,
                    "description": "Arc stroke width."
                },
                "circular": {
                    "type": "boolean",
                    "description": "`By default the Arc is curved. If `circular: false` the Arc will be flat.",
                    "default": true
                }
            }
        },
        "elements_bar": {
            "type": "object",
            "description": "Bar elements are used to represent the bars in a bar chart.",
            "default": {},
            "properties": {
                "backgroundColor": {
                    "description": "Bar fill color.",
                    "$ref": "#/$defs/color"
                },
                "borderWidth": {
                    "type": "number",
                    "default": 0,
                    "description": "Bar stroke width."
                },
                "borderColor": {
                    "description": "Bar stroke color.",
                    "$ref": "#/$defs/color"
                },
                "borderSkipped": {
                    "description": "Skipped (excluded) border.",
                    "$ref": "#/$defs/border"
                },
                "borderRadius": {
                    "type": ["number", "object"],
                    "default": 0,
                    "description": "Point radius."
                },
                "inflateAmount": {
                    "type": ["number", "string"],
                    "default": "auto",
                    "description": "The amount of pixels to inflate the bar rectangle(s) when drawing."
                },
                "pointStyle": {
                    "$ref": "#/$defs/point_style",
                    "default": "circle",
                    "description": "Point style."
                }
            }
        },
        "elements_line": {
            "type": "object",
            "description": "Line elements are used to represent the line in a line chart.",
            "default": {},
            "properties": {

                "backgroundColor": {
                    "description": "Line fill color.",
                    "$ref": "#/$defs/color"
                },
                "borderWidth": {
                    "type": "number",
                    "default": 3,
                    "description": "Line stroke width."
                },
                "borderColor": {
                    "description": "Line stroke color.",
                    "$ref": "#/$defs/color"
                },
                "borderCapStyle": {
                    "description": "Line cap style.",
                    "$ref": "#/$defs/line_cap",
                    "default": "butt"
                },
                "borderDash": {
                    "description": "Line cap style.",
                    "$ref": "#/$defs/line_dash",
                    "default": []
                },
                "borderDashOffset": {
                    "type": "number",
                    "description": "Line dash offset.",
                    "default": 0.0
                },
                "borderJoinStyle": {
                    "description": "Line join style.",
                    "$ref": "#/$defs/line_join",
                    "default": "miter"
                },
                "capBezierPoints": {
                    "type": "boolean",
                    "description": "`true` to keep Bézier control inside the chart, `false` for no restriction.",
                    "default": true
                },
                "cubicInterpolationMode": {
                    "description": "Line join style.",
                    "default": "default",
                    "$ref": "#/$defs/interpolation_cubic_mode"
                },
                "fill": {
                    "description": "How to fill the area under the line.",
                    "default": false,
                    "$ref": "#/$defs/area_fill"
                },
                "stepped": {
                    "type": "boolean",
                    "description": "`true` to show the line as a stepped line (`tension` will be ignored).",
                    "default": false
                },
                "tension": {
                    "type": "number",
                    "default": 0,
                    "description": "Bézier curve tension (0 for no Bézier curves)."
                }
            }
        },
        "elements_point": {
            "type": "object",
            "description": "Point elements are used to represent the points in a line, radar or bubble chart.",
            "default": {},
            "properties": {
                "radius": {
                    "type": "number",
                    "default": 3,
                    "description": "Point radius."
                },
                "pointStyle": {
                    "$ref": "#/$defs/point_style",
                    "default": "circle",
                    "description": "Point style."
                },
                "rotation": {
                    "type": "number",
                    "default": 0,
                    "description": "Point rotation (in degrees)."
                },
                "backgroundColor": {
                    "description": "Point fill color.",
                    "$ref": "#/$defs/color"
                },
                "borderColor": {
                    "description": "Point stroke color.",
                    "$ref": "#/$defs/color"
                },
                "borderWidth": {
                    "type": "number",
                    "default": 1,
                    "description": "Point stroke width."
                },
                "hitRadius": {
                    "type": "number",
                    "default": 1,
                    "description": "Extra radius added to point radius for hit detection."
                },
                "hoverRadius": {
                    "type": "number",
                    "default": 4,
                    "description": "Point radius when hovered"
                },
                "hoverBorderWidth": {
                    "type": "number",
                    "default": 1,
                    "description": "Stroke width when hovered."
                }
            }
        },
        "font": {
            "type": ["string", "object"],
            "required": ["size", "style", "weight"],
            "default": {
                "size": 12,
                "style": "normal",
                "weight": "normal"
            },
            "properties": {
                "family": {
                    "type": "string",
                    "description": "Default font family for text, follows CSS font-family options.",
                    "default": "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif"
                },
                "size": {
                    "type": ["string", "number"],
                    "description": "Default font size (in px) for text.",
                    "default": 12
                },
                "style": {
                    "type": "string",
                    "description": "Default font style. Does not apply to tooltip title or footer. Does not apply to chart title. Follows CSS font-style options (i.e. normal, italic, oblique, initial, inherit).",
                    "default": "normal"
                },
                "weight": {
                    "type": ["string", "number"],
                    "description": "Font weight.",
                    "suggestions": [
                        "normal",
                        "bold",
                        "lighter",
                        "bolder"
                    ],
                    "default": "normal"
                },
                "lineHeight": {
                    "type": ["string", "number"],
                    "description": "Height of an individual line of text.",
                    "default": 1.2
                }
            }
        },
        "function": {
            "type": ["string", "null"]
        },
        "interaction": {
            "type": "object",
            "properties": {
                "mode": {
                    "default": "nearest",
                    "description": "Sets which elements appear in the interaction.",
                    "$ref": "#/$defs/interaction_mode"
                },
                "intersect": {
                    "type": "boolean",
                    "default": true,
                    "description": "If true, the interaction mode only applies when the mouse position intersects an item on the chart."
                },
                "axis": {
                    "default": "x",
                    "$ref": "#/$defs/axis"
                },
                "includeInvisible": {
                    "type": "boolean",
                    "default": false,
                    "description": "If true, the invisible points that are outside of the chart area will also be included when evaluating interactions."
                }
            }
        },
        "interaction_mode": {
            "type": ["string", "null"],
            "suggestions": [
                "index",
                "dataset",
                "nearest",
                "point",
                "x",
                "y"
            ]
        },
        "interpolation_cubic_mode": {
            "type": "string",
            "default": "default",
            "enum": [
                "default",
                "monotone"
            ]
        },
        "layout": {
            "type": "object",
            "properties": {
                "autoPadding": {
                    "type": "boolean",
                    "default": true,
                    "description": "Apply automatic padding so visible elements are completely drawn."
                },
                "padding": {
                    "description": "The padding to add inside the chart.",
                    "default": 0,
                    "$ref": "#/$defs/padding"
                }
            }
        },
        "layout_position": {
            "enum": [ "left", "top", "right", "bottom", "center", "chartArea" ],
            "type": "string"
        },
        "line_cap": {
            "type": "string",
            "suggestions": [
                "butt",
                "round",
                "square"
            ]
        },
        "line_dash": {
            "type": "array",
            "items": {
                "type": "number"
            }
        },
        "line_join": {
            "type": "string",
            "suggestions": [
                "round",
                "bevel",
                "miter"
            ]
        },
        "padding": {
            "type": [ "number", "object" ]
        },
        "plugin": {
            "type": "object",
            "description": "A plugin definition",
            "required": ["id"],
            "properties": {
                "defaults": {
                    "type": "object",
                    "description": "Default options used in the plugin."
                },
                "events": {
                    "type": "array",
                    "description": "The events option defines the browser events that the plugin should listen.",
                    "items": "string",
                    "default": [
                        "mousemove", "mouseout", "click", "touchstart", "touchmove"
                    ]
                },
                "id": {
                    "type": "string",
                    "default": "",
                    "description": "Unique plugin id."
                },
                "afterBuildTicks": {
                    "$ref": "#/$defs/function",
                    "description": "Called after scale has build its ticks. This hook is called separately for each scale in the chart."
                },
                "afterDataLimits": {
                    "$ref": "#/$defs/function",
                    "description": "Called after scale data limits are calculated. This hook is called separately for each scale in the chart."
                },
                "afterDatasetDraw": {
                    "$ref": "#/$defs/function",
                    "description": "Called after the chart datasets at the given args.index have been drawn (datasets are drawn in the reverse order). Note that this hook will not be called if the datasets drawing has been previously cancelled."
                },
                "afterDatasetUpdate": {
                    "$ref": "#/$defs/function",
                    "description": "Called after the chart datasets at the given args.index has been updated. Note that this hook will not be called if the datasets update has been previously cancelled."
                },
                "afterDatasetsDraw": {
                    "$ref": "#/$defs/function",
                    "description": "Called after the chart datasets have been drawn. Note that this hook will not be called if the datasets drawing has been previously cancelled."
                },
                "afterDatasetsUpdate": {
                    "$ref": "#/$defs/function",
                    "description": "Called after the chart datasets have been updated. Note that this hook will not be called if the datasets update has been previously cancelled."
                },
                "afterDestroy": {
                    "$ref": "#/$defs/function",
                    "description": "Called after the chart has been destroyed."
                },
                "afterDraw": {
                    "$ref": "#/$defs/function",
                    "description": "Called after the chart has been drawn. Note that this hook will not be called if the drawing has been previously cancelled."
                },
                "afterEvent": {
                    "$ref": "#/$defs/function",
                    "description": "Called after the event has been consumed. Note that this hook will not be called if the event has been previously discarded."
                },
                "afterInit": {
                    "$ref": "#/$defs/function",
                    "description": "Called after chart has been initialized and before the first update."
                },
                "afterLayout": {
                    "$ref": "#/$defs/function",
                    "description": "Called after the chart has been laid out. Note that this hook will not be called if the layout update has been previously cancelled."
                },
                "afterRender": {
                    "$ref": "#/$defs/function",
                    "description": "Called after the chart has been fully rendered (and animation completed). Note that this hook will not be called if the rendering has been previously cancelled."
                },
                "afterTooltipDraw": {
                    "$ref": "#/$defs/function",
                    "description": "Called after drawing the tooltip. Note that this hook will not be called if the tooltip drawing has been previously cancelled."
                },
                "afterUpdate": {
                    "$ref": "#/$defs/function",
                    "description": "Called after chart has been updated and before rendering. Note that this hook will not be called if the chart update has been previously cancelled."
                },
                "beforeBuildTicks": {
                    "$ref": "#/$defs/function",
                    "description": "Called before scale builds its ticks. This hook is called separately for each scale in the chart."
                },
                "beforeDataLimits": {
                    "$ref": "#/$defs/function",
                    "description": "Called before scale data limits are calculated. This hook is called separately for each scale in the chart."
                },
                "beforeDatasetDraw": {
                    "$ref": "#/$defs/function",
                    "description": "Called before drawing the chart dataset at the given args.index (datasets are drawn in the reverse order). If any plugin returns false, the datasets drawing is cancelled until another render is triggered."
                },
                "beforeDatasetUpdate": {
                    "$ref": "#/$defs/function",
                    "description": "Called before updating the chart dataset at the given args.index. If any plugin returns false, the datasets update is cancelled until another update is triggered."
                },
                "beforeDatasetsDraw": {
                    "$ref": "#/$defs/function",
                    "description": "Called before drawing the chart datasets. If any plugin returns false, the datasets drawing is cancelled until another render is triggered."
                },
                "beforeDestroy": {
                    "$ref": "#/$defs/function",
                    "description": "Called before the chart is being destroyed."
                },
                "beforeDraw": {
                    "$ref": "#/$defs/function",
                    "description": "Called before drawing chart at every animation frame. If any plugin returns false, the frame drawing is cancelled untilanother render is triggered."
                },
                "beforeElementsUpdate": {
                    "$ref": "#/$defs/function",
                    "description": "Called during the update process, before any chart elements have been created. This can be used for data decimation by changing the data array inside a dataset."
                },
                "beforeEvent": {
                    "$ref": "#/$defs/function",
                    "description": "Called before processing the specified event. If any plugin returns false, the event will be discarded."
                },
                "beforeInit": {
                    "$ref": "#/$defs/function",
                    "description": "Called before initializing chart."
                },
                "beforeLayout": {
                    "$ref": "#/$defs/function",
                    "description": "Called before laying out chart. If any plugin returns false, the layout update is cancelled until another update is triggered."
                },
                "beforeRender": {
                    "$ref": "#/$defs/function",
                    "description": "Called before rendering chart. If any plugin returns false, the rendering is cancelled until another render is triggered."
                },
                "beforeTooltipDraw": {
                    "$ref": "#/$defs/function",
                    "description": "Called before drawing the tooltip. If any plugin returns false, the tooltip drawing is cancelled until another render is triggered."
                },
                "beforeUpdate": {
                    "$ref": "#/$defs/function",
                    "description": "Called before updating chart. If any plugin returns false, the update is cancelled (and thus subsequent render(s)) until another update is triggered."
                },
                "install": {
                    "$ref": "#/$defs/function",
                    "description": "Called when plugin is installed for this chart instance. This hook is also invoked for disabled plugins (options === false)."
                },
                "reset": {
                    "$ref": "#/$defs/function",
                    "description": "Called during chart reset"
                },
                "resize": {
                    "$ref": "#/$defs/function",
                    "description": "Called after the chart as been resized."
                },
                "start": {
                    "$ref": "#/$defs/function",
                    "description": "Called when a plugin is starting. This happens when chart is created or plugin is enabled."
                },
                "stop": {
                    "$ref": "#/$defs/function",
                    "description": "Called when a plugin stopping. This happens when chart is destroyed or plugin is disabled."
                },
                "uninstall": {
                    "$ref": "#/$defs/function",
                    "description": "Called after chart is destroyed on all plugins that were installed for that chart. This hook is also invoked for disabled plugins (options === false)."
                }
            }
        },
        "plugins_options": {
            "type": "object",
            "properties": {
                "annotation": {
                    "default": false,
                    "$ref": "#/$defs/plugin_annotation"
                },
                "autocolors": {
                    "default": false,
                    "$ref": "#/$defs/plugin_autocolors"
                },
                "colors": {
                    "$ref": "#/$defs/plugin_colors"
                },
                "crosshair": {
                    "default": false,
                    "$ref": "#/$defs/plugin_crosshair"
                },
                "datalabels": {
                    "default": false,
                    "$ref": "#/$defs/plugin_datalabels"
                },
                "decimation": {
                    "$ref": "#/$defs/plugin_decimation"
                },
                "filler": {
                    "$ref": "#/$defs/plugin_filler"
                },
                "legend": {
                    "$ref": "#/$defs/plugin_legend"
                },
                "subtitle": {
                    "$ref": "#/$defs/plugin_title"
                },
                "title": {
                    "$ref": "#/$defs/plugin_title"
                },
                "tooltip": {
                    "$ref": "#/$defs/plugin_tooltip"
                },
                "zoom": {
                    "$ref": "#/$defs/plugin_zoom"
                }
            }
        },
        "plugin_annotation": {
            "type": ["object", "boolean"],
            "default": false
        },
        "plugin_autocolors": {
            "type": ["object", "boolean"],
            "default": false,
            "properties": {
                "customize": {
                    "$ref": "#/$defs/function"
                },
                "enabled": {
                    "type": "boolean"
                },
                "mode": {
                    "type": "string",
                    "enum": [
                        "data",
                        "dataset",
                        "label"
                    ]
                },
                "offset": {
                    "type": "number"
                },
                "repeat": {
                    "type": "number"
                }
            }
        },
        "plugin_colors": {
            "type": ["object", "boolean"],
            "default": {
                "enabled": true
            },
            "properties": {
                "enabled": {
                    "description": "Enable the colors plugin.",
                    "type": "boolean"
                },
                "forceOverride": {
                    "type": "boolean"
                }
            },
            "required": [ "enabled" ]
        },
        "plugin_crosshair": {
            "type": ["object", "boolean"],
            "default": false
        },
        "plugin_datalabels": {
            "type": ["object", "boolean"],
            "default": false
        },
        "plugin_decimation": {
            "type": ["object", "boolean"],
            "properties": {
                "enabled": {
                    "description": "Enable the decimation plugin.",
                    "type": "boolean",
                    "default": true
                },
                "threshold": {
                    "description": "Decimation threshold.",
                    "type": "number",
                    "default": 1,
                    "required": false
                },
                "algorithm": {
                    "description": "Decimation algorithm.",
                    "type": "string",
                    "default": "lttb",
                    "enum": [ "lttb", "min-max" ]
                },
                "samples": {
                    "description": "Decimation samples.",
                    "type": "number",
                    "required": false
                }
            },
            "required": [ "enabled", "algorithm" ]
        },
        "plugin_filler": {
            "type": ["object", "boolean"],
            "default": {
                "drawTime": "beforeDraw",
                "propagate": false
            },
            "properties": {
                "drawTime": {
                    "description": "Fill draw time.",
                    "type": "string",
                    "enum": [ "beforeDraw", "beforeDatasetDraw", "beforeDatasetsDraw" ]
                },
                "propagate": {
                    "description": "Propagate fill.",
                    "type": "boolean"
                }
            },
            "required": [ "drawTime", "propagate" ]
        },
        "plugin_legend": {
            "type": ["object", "boolean"],
            "default": {
                "display": true,
                "position": "top",
                "align": "center"
            },
            "properties": {
                "display": {
                    "default": true,
                    "description": "Is the legend shown?",
                    "type": "boolean"
                },
                "position": {
                    "default": "top",
                    "description": "Position of the legend.",
                    "$ref": "#/$defs/layout_position"
                },
                "align": {
                    "default": "center",
                    "description": "Alignment of the legend.",
                    "$ref": "#/$defs/align"
                },
                "maxHeight": {
                    "description": "Maximum height of the legend, in pixels.",
                    "type": "number"
                },
                "maxWidth": {
                    "description": "Maximum width of the legend, in pixels.",
                    "type": "number"
                },
                "fullSize": {
                    "default": true,
                    "description": "Marks that this box should take the full width/height of the canvas (moving other boxes). This is unlikely to need to be changed in day-to-day use.",
                    "type": "boolean"
                },
                "onClick": {
                    "default": "",
                    "description": "A callback that is called when a click event is registered on a label item.",
                    "$ref": "#/$defs/function"
                },
                "onHover": {
                    "default": "",
                    "description": "A callback that is called when a 'mousemove' event is registered on top of a label item. ",
                    "$ref": "#/$defs/function"
                },
                "onLeave": {
                    "default": "",
                    "description": "A callback that is called when a 'mousemove' event is registered outside of a previously hovered label item.",
                    "$ref": "#/$defs/function"
                },
                "reverse": {
                    "default": false,
                    "description": "Legend will show datasets in reverse order.",
                    "type": "boolean"
                },
                "labels": {
                    "type": "object",
                    "default": {
                        "boxWidth": 40,
                        "boxHeight": 12,
                        "color": null
                    },
                    "properties": {
                        "boxWidth": {
                            "default": 40,
                            "description": "Width of colored box.",
                            "type": "number"
                        },
                        "boxHeight": {
                            "default": 12,
                            "description": "Width of colored box.",
                            "type": "number"
                        },
                        "color": {
                            "description": "Color of label and the strikethrough.",
                            "$ref": "#/$defs/color"
                        },
                        "font": {
                            "$ref": "#/$defs/font"
                        },
                        "padding": {
                            "type": "number",
                            "default": 10,
                            "description": "Padding between rows of colored boxes."
                        },
                        "filter": {
                            "description": "Filters legend items out of the legend.",
                            "$ref": "#/$defs/function"
                        },
                        "sort": {
                            "description": "Sorts legend items. ",
                            "$ref": "#/$defs/function"
                        },
                        "pointStyle": {
                            "default": "circle",
                            "description": "If specified, this style of point is used for the legend. Only used if usePointStyle is true.",
                            "$ref": "#/$defs/point_style"
                        },
                        "textAlign": {
                            "description": "Horizontal alignment of the label text.",
                            "default": "center",
                            "$ref": "#/$defs/text_alignment"
                        },
                        "usePointStyle": {
                            "type": "boolean",
                            "default": false,
                            "description": "Label style will match corresponding point style (size is based on pointStyleWidth or the minimum value between boxWidth and font.size)."
                        },
                        "pointStyleWidth": {
                            "type": "number",
                            "default": 16,
                            "description": "If usePointStyle is true, the width of the point style used for the legend."
                        },
                        "useBorderRadius": {
                            "type": "boolean",
                            "default": false,
                            "description": "Label borderRadius will match corresponding borderRadius."
                        },
                        "borderRadius": {
                            "type": "number",
                            "default": 5,
                            "description": "Override the borderRadius to use."
                        }
                    }
                },
                "rtl": {
                    "type": "boolean",
                    "default": false,
                    "description": "true for rendering the legends from right to left."
                },
                "textDirection": {
                    "type": "string",
                    "$ref": "#/$defs/text_direction"
                },
                "title": {
                    "type": "object",
                    "properties": {
                        "color": {
                            "type": "string",
                            "description": "Color of text.",
                            "$ref": "#/$defs/color"
                        },
                        "display": {
                            "type": "boolean",
                            "default": false,
                            "description": "Is the legend title displayed?"
                        },
                        "font": {
                            "$ref": "#/$defs/font"
                        },
                        "padding": {
                            "description": "Padding around the title.",
                            "$ref": "#/$defs/padding"
                        },
                        "text": {
                            "type": "string",
                            "default": "",
                            "description": "The string title."
                        }
                    }
                }
            },
            "required": [ "display", "position", "align" ]
        },
        "plugin_title": {
            "type": ["object", "boolean"],
            "default": {
                "align": "center",
                "display": false,
                "position": "top",
                "text": "Title"
            },
            "properties": {
                "align": {
                    "default": "center",
                    "description": "Alignment of the title.",
                    "$ref": "#/$defs/align"
                },
                "display": {
                    "default": true,
                    "description": "Is the title shown?",
                    "type": "boolean"
                },
                "position": {
                    "default": "top",
                    "description": "Position of the title.",
                    "$ref": "#/$defs/layout_position"
                },
                "color": {
                    "description": "Color of text.",
                    "$ref": "#/$defs/color"
                },
                "font": {
                    "description": "Text font.",
                    "$ref": "#/$defs/font"
                },
                "fullSize": {
                    "default": true,
                    "description": "Marks that this box should take the full width/height of the canvas (moving other boxes). If set to `false`, places the box above/beside the chart area.",
                    "type": "boolean"
                },
                "padding": {
                    "description": "Adds padding above and below the title text if a single number is specified. It is also possible to change top and bottom padding separately.",
                    "type": "number"
                },
                "text": {
                    "description": "Title text to display. If specified as an array, text is rendered on multiple lines.",
                    "type": ["string", "array"]
                }
            },
            "required": [ "display", "text", "align" ]
        },
        "plugin_tooltip": {
            "type": ["object", "boolean"],
            "default": {
                "enabled": true,
                "position": "average",
                "backgroundColor": "#000000cc",
                "titleColor": "#ffffff",
                "titleAlign": "left",
                "bodyColor": "#ffffff",
                "bodyAlign": "left",
                "footerColor": "#ffffff",
                "footerAlign": "left",
                "padding": 6,
                "displayColors": true,
                "borderColor": "#000000",
                "borderWidth": 0
            },
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Are on-canvas tooltips enabled?",
                    "default": true
                },
                "external": {
                    "type": "string",
                    "required": false,
                    "description": "External tooltips allow you to hook into the tooltip rendering process so that you can render the tooltip in your own custom way. Generally this is used to create an HTML tooltip instead of an on-canvas tooltip. The external option takes a function which is passed a context parameter containing the chart and tooltip.",
                    "default": null
                },
                "mode": {
                    "description": "Sets which elements appear in the tooltip.",
                    "$ref": "#/$defs/interaction_mode",
                    "default": "index",
                    "required": false
                },
                "intersect": {
                    "type": "boolean",
                    "required": true,
                    "description": "If true, the tooltip mode applies only when the mouse position intersects with an element. If false, the mode will be applied at all times.",
                    "default": null
                },
                "position": {
                    "description": "The mode for positioning the tooltip.",
                    "$ref": "#/$defs/plugin_tooltip_mode",
                    "default": "average"
                },
                "callbacks": {
                    "description": "Optional value providing callbacks. If the callback returns `undefined`, the default callback will be used. If the callback returns an empty string, the item will be removed from the tooltip.",
                    "$ref": "#/$defs/plugin_tooltip_callbacks",
                    "required": false,
                    "default": {}
                },
                "itemSort": {
                    "description": "Function used to sort tooltip items.",
                    "$ref": "#/$defs/function",
                    "default": null,
                    "required": false
                },
                "filter": {
                    "description": "Function used to filter tooltip items.",
                    "$ref": "#/$defs/function",
                    "default": null,
                    "required": false
                },
                "backgroundColor": {
                    "description": "Background color of the tooltip.",
                    "$ref": "#/$defs/color",
                    "default": "#000000cc"
                },
                "titleColor": {
                    "description": "Color of title text.",
                    "$ref": "#/$defs/color",
                    "default": "#ffffff"
                },
                "titleFont": {
                    "description": "Font of title text.",
                    "$ref": "#/$defs/font",
                    "required": false
                },
                "titleAlign": {
                    "description": "Horizontal alignment of the title text lines.",
                    "$ref": "#/$defs/text_alignment"
                },
                "titleSpacing": {
                    "type": "number",
                    "description": "Spacing to add to top and bottom of each title line.",
                    "default": 2,
                    "required": false
                },
                "titleMarginBottom": {
                    "type": "number",
                    "description": "Margin to add on bottom of title section.",
                    "default": 6,
                    "required": false
                },
                "bodyColor": {
                    "description": "Color of body text.",
                    "$ref": "#/$defs/color",
                    "default": "#ffffff"
                },
                "bodyFont": {
                    "description": "Font of body text.",
                    "$ref": "#/$defs/font",
                    "required": false
                },
                "bodyAlign": {
                    "description": "Horizontal alignment of the body text lines.",
                    "$ref": "#/$defs/text_alignment"
                },
                "bodySpacing": {
                    "type": "number",
                    "description": "Spacing to add to top and bottom of each tooltip item.",
                    "default": 2,
                    "required": false
                },
                "footerColor": {
                    "description": "Color of footer text.",
                    "$ref": "#/$defs/color",
                    "default": "#ffffff"
                },
                "footerFont": {
                    "description": "Font of footer text.",
                    "$ref": "#/$defs/font",
                    "required": false
                },
                "footerAlign": {
                    "description": "Horizontal alignment of the footer text lines.",
                    "$ref": "#/$defs/text_alignment"
                },
                "footerSpacing": {
                    "type": "number",
                    "description": "Spacing to add to top and bottom of each footer line.",
                    "default": 2,
                    "required": false
                },
                "footerMarginTop": {
                    "type": "number",
                    "description": "Margin to add before drawing the footer.",
                    "default": 6,
                    "required": false
                },
                "padding": {
                    "description": "Padding inside the tooltip.",
                    "$ref": "#/$defs/padding",
                    "default": 6
                },
                "caretPadding": {
                    "type": "number",
                    "description": "Extra distance to move the end of the tooltip arrow away from the tooltip point.",
                    "default": 2,
                    "required": false
                },
                "caretSize": {
                    "type": "number",
                    "description": "Size, in px, of the tooltip arrow.",
                    "default": 5,
                    "required": false
                },
                "cornerRadius": {
                    "type": "number",
                    "description": "Radius of tooltip corner curves.",
                    "default": 6,
                    "required": false
                },
                "multiKeyBackground": {
                    "description": "Color to draw behind the colored boxes when multiple items are in the tooltip.",
                    "$ref": "#/$defs/color",
                    "default": "#ffffff",
                    "required": false
                },
                "displayColors": {
                    "type": "boolean",
                    "description": "If true, color boxes are shown in the tooltip.",
                    "default": true
                },
                "boxWidth": {
                    "type": "number",
                    "description": "Width of the color box if displayColors is true.",
                    "default": 16,
                    "required": false
                },
                "boxHeight": {
                    "type": "number",
                    "description": "Height of the color box if displayColors is true.",
                    "default": 16,
                    "required": false
                },
                "boxPadding": {
                    "type": "number",
                    "description": "Padding between the color box and the text.",
                    "default": 1,
                    "required": false
                },
                "usePointStyle": {
                    "type": "boolean",
                    "description": "Use the corresponding point style (from dataset options) instead of color boxes, ex: star, triangle etc. (size is based on the minimum value between boxWidth and boxHeight).",
                    "default": false,
                    "required": false
                },
                "borderColor": {
                    "description": "Color of the border.",
                    "$ref": "#/$defs/color",
                    "default": "#000000"
                },
                "borderWidth": {
                    "type": "number",
                    "description": "Size of the border.",
                    "default": 0,
                    "required": false
                },
                "rtl": {
                    "type": "boolean",
                    "description": "true for rendering the tooltip from right to left.",
                    "default": false,
                    "required": false
                },
                "textDirection": {
                    "type": "string",
                    "description": "This will force the text direction 'rtl' or 'ltr' on the canvas for rendering the tooltips, regardless of the css specified on the canvas.",
                    "$ref": "#/$defs/text_direction",
                    "default": "rtl",
                    "required": false
                },
                "xAlign": {
                    "type": "string",
                    "description": "Position of the tooltip caret in the X direction.",
                    "$ref": "#/$defs/plugin_tooltip_alignment_x",
                    "default": "center",
                    "required": false
                },
                "yAlign": {
                    "type": "string",
                    "description": "Position of the tooltip caret in the Y direction.",
                    "$ref": "#/$defs/plugin_tooltip_alignment_y",
                    "default": "center",
                    "required": false
                }
            }
        },
        "plugin_tooltip_alignment_x": {
            "type": "string",
            "default": "left",
            "enum": [
                "left",
                "center",
                "right"
            ]
        },
        "plugin_tooltip_alignment_y": {
            "type": "string",
            "default": "top",
            "enum": [
                "top",
                "center",
                "bottom"
            ]
        },
        "plugin_tooltip_callbacks": {
            "beforeTitle": {
                "required": false,
                "default": null,
                "$ref": "#/$defs/function",
                "description": "Returns the text to render before the title."
            },
            "title": {
                "required": false,
                "default": null,
                "$ref": "#/$defs/function",
                "description": "Returns text to render as the title of the tooltip."
            },
            "afterTitle": {
                "required": false,
                "default": null,
                "$ref": "#/$defs/function",
                "description": "Returns text to render after the title."
            },
            "beforeBody": {
                "required": false,
                "default": null,
                "$ref": "#/$defs/function",
                "description": "Returns text to render before the body section."
            },
            "beforeLabel": {
                "required": false,
                "default": null,
                "$ref": "#/$defs/function",
                "description": "Returns text to render before an individual label. This will be called for each item in the tooltip."
            },
            "label": {
                "required": false,
                "default": null,
                "$ref": "#/$defs/function",
                "description": "Returns text to render for an individual item in the tooltip."
            },
            "labelColor": {
                "required": false,
                "default": null,
                "$ref": "#/$defs/function",
                "description": "Returns the colors to render for the tooltip item."
            },
            "labelTextColor": {
                "required": false,
                "default": null,
                "$ref": "#/$defs/function",
                "description": "Returns the colors for the text of the label for the tooltip item."
            },
            "labelPointStyle": {
                "required": false,
                "default": null,
                "$ref": "#/$defs/function",
                "description": "Returns the point style to use instead of color boxes if usePointStyle is true (object with values pointStyle and rotation). Default implementation uses the point style from the dataset points."
            },
            "afterLabel": {
                "required": false,
                "default": null,
                "$ref": "#/$defs/function",
                "description": "Returns text to render after an individual label."
            },
            "afterBody": {
                "required": false,
                "default": null,
                "$ref": "#/$defs/function",
                "description": "Returns text to render after the body section."
            },
            "beforeFooter": {
                "required": false,
                "default": null,
                "$ref": "#/$defs/function",
                "description": "Returns text to render before the footer section."
            },
            "footer": {
                "required": false,
                "default": null,
                "$ref": "#/$defs/function",
                "description": "Returns text to render as the footer of the tooltip."
            },
            "afterFooter": {
                "required": false,
                "default": null,
                "$ref": "#/$defs/function",
                "description": "Text to render after the footer section."
            }
        },
        "plugin_tooltip_mode": {
            "type": ["string", "null"],
            "description": "'average' mode will place the tooltip at the average position of the items displayed in the tooltip. 'nearest' will place the tooltip at the position of the element closest to the event position.",
            "suggestions": [
                "average",
                "nearest"
            ]
        },
        "plugin_zoom": {
            "type": ["object", "boolean"],
            "properties": {
                "limits": {
                    "$ref": "#/$defs/plugin_zoom_limits"
                },
                "pan": {
                    "$ref": "#/$defs/plugin_zoom_pan"
                },
                "zoom": {
                    "$ref": "#/$defs/plugin_zoom_zoom"
                }
            },
            "default": {
                "pan": {
                    "enabled": true,
                    "mode": "x",
                    "modifierKey": "ctrl"
                },
                "zoom": {
                    "mode": "x",
                    "drag": {
                        "enabled": true,
                        "modifierKey": "ctrl"
                    },
                    "pinch": {
                        "enabled": true
                    },
                    "wheel": {
                        "enabled": true,
                        "modifierKey": "ctrl"
                    }
                }
            }
        },
        "plugin_zoom_drag": {
            "type": "object",
            "default": {
                "enabled": false,
                "backgroundColor":  "#ffffff4d",
                "borderColor": "#ffffff",
                "borderWidth": 0,
                "drawTime": "beforeDatasetsDraw",
                "threshold": 0,
                "modifierKey": "ctrl"
            },
            "properties": {
                "enabled": {
                    "default": true,
                    "description": "Enable drag-to-zoom",
                    "type": "boolean"
                },
                "backgroundColor": {
                    "default": "#ffffff4d",
                    "description": "Fill color",
                    "$ref": "#/$defs/color"
                },
                "borderColor": {
                    "default": "#ffffff",
                    "description": "Stroke color",
                    "$ref": "#/$defs/color"
                },
                "borderWidth": {
                    "default": 0,
                    "description": "Stroke width",
                    "type": "number"
                },
                "drawTime": {
                    "default": "beforeDatasetsDraw",
                    "description": "When the dragging box is drawn on the chart",
                    "$ref": "#/$defs/plugin_zoom_draw_time"
                },
                "threshold": {
                    "default": 0,
                    "description": "Minimal zoom distance required before actually applying zoom",
                    "type": "number"
                },
                "modifierKey": {
                    "default": "",
                    "description": "Modifier key required for drag-to-zoom",
                    "$ref": "#/$defs/plugin_zoom_modifier_key"
                }
            }
        },
        "plugin_zoom_draw_time": {
            "type": "string",
            "description": "The drawTime option for zooming determines where in the chart lifecycle the drag box drawing occurs.",
            "enum": [
                "beforeDraw",
                "beforeDatasetsDraw",
                "afterDatasetsDraw",
                "afterDraws"
            ]
        },
        "plugin_zoom_mode": {
            "type": "string",
            "default": "x",
            "enum": [
                "x",
                "y",
                "xy"
            ]
        },
        "plugin_zoom_modifier_key": {
            "type": ["null", "string"],
            "default": "",
            "enum": [
                null,
                "ctrl",
                "alt",
                "shift",
                "meta"
            ]
        },
        "plugin_zoom_scale_limits": {
            "type": "object",
            "properties": {
                "min": {
                    "default": "original",
                    "description": "Minimum allowed value for scale.min",
                    "type": ["string", "number"]
                },
                "max": {
                    "default": "original",
                    "description": "Maximum allowed value for scale.min",
                    "type": ["string", "number"]
                },
                "minRange": {
                    "default": null,
                    "description": "Minimum allowed range (max - min). This defines the max zoom level.",
                    "type": ["number", "null"]
                }
            }
        },
        "plugin_zoom_limits": {
            "type": "object",
            "defaults": {
                "x": {},
                "y": {}
            },
            "properties": {
                "x": {
                    "description": "Limits for x-axis",
                    "$ref": "#/$defs/plugin_zoom_scale_limits"
                },
                "y": {
                    "description": "Limits for x-axis",
                    "$ref": "#/$defs/plugin_zoom_scale_limits"
                }
            }
        },
        "plugin_zoom_pan": {
            "type": "object",
            "default": {
                "enabled": true,
                "mode": "x",
                "modifierKey": "ctrl"
            },
            "properties": {
                "enabled": {
                    "default": true,
                    "description": "Enable panning",
                    "type": "boolean"
                },
                "mode": {
                    "description": "Allowed panning directions",
                    "$ref": "#/$defs/plugin_zoom_mode"
                },
                "modifierKey": {
                    "default": "ctrl",
                    "description" : "Modifier key required for panning with mouse",
                    "$ref": "#/$defs/plugin_zoom_modifier_key"
                },
                "scaleMode": {
                    "description": "Enable panning over a scale for that axis (regardless of mode)",
                    "$ref": "#/$defs/plugin_zoom_mode"
                },
                "threshold": {
                    "default": 10,
                    "description": "Minimal pan distance required before actually applying pan",
                    "type": "number"
                }
            }
        },
        "plugin_zoom_pinch": {
            "type": "object",
            "default": {
                "enabled": true
            },
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable zooming via pitch"
                }
            }
        },
        "plugin_zoom_wheel": {
            "type": "object",
            "default": {
                "enabled": true,
                "speed": "0.1",
                "modifierKey": null
            },
            "properties": {
                "enabled": {
                    "default": true,
                    "description": "Enable zooming via mouse wheel",
                    "type": "boolean"
                },
                "speed": {
                    "default": 0.1,
                    "description": "Factor of zoom speed via mouse wheel",
                    "type": "number"
                },
                "modifierKey": {
                    "default": "ctrl",
                    "description": "Modifier key required for zooming via mouse wheel",
                    "$ref": "#/$defs/plugin_zoom_modifier_key"
                }
            }
        },
        "plugin_zoom_zoom": {
            "type": "object",
            "default": {
                "enabled": true,
                "mode": "x",
                "modifierKey": "ctrl"
            },
            "properties": {
                "wheel": {
                    "description": "Options of the mouse wheel behavior",
                    "$ref": "#/$defs/plugin_zoom_wheel"
                },
                "drag": {
                    "description": "Options of the drag-to-zoom behavior",
                    "$ref": "#/$defs/plugin_zoom_drag"
                },
                "pinch": {
                    "description": "Options of the pinch behavior",
                    "$ref": "#/$defs/plugin_zoom_pinch"
                },
                "mode": {
                    "description": "Allowed zoom directions",
                    "$ref": "#/$defs/plugin_zoom_mode"
                },
                "scaleMode": {
                    "description": "Which of the enabled zooming directions should only be available when the mouse cursor is over a scale for that axis",
                    "$ref": "#/$defs/plugin_zoom_mode"
                }
            }
        },
        "point": {
            "type": "object",
            "properties": {
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                }
            }
        },
        "point_style": {
            "type": ["string", "boolean"],
            "enum": [
                "circle",
                "cross",
                "crossRot",
                "dash",
                "line",
                "rect",
                "rectRounded",
                "rectRot",
                "star",
                "triangle",
                false
            ]
        },
        "scale_options": {
            "type": "object",
            "default": {
                "display": true,
                "min": null,
                "max": null,
                "type": "linear"
            },
            "properties": {
                "type": {
                    "description": "Type of scale being employed. Custom scales can be created and registered with a string key. This allows changing the type of an axis for a chart.",
                    "$ref": "#/$defs/scale_type"
                },
                "alignToPixels": {
                    "default": true,
                    "description": "Align pixel values to device pixels.",
                    "type": "boolean"
                },
                "backgroundColor": {
                    "description": "Background color of the scale area.",
                    "$ref": "#/$defs/color"
                },
                "border": {
                    "description": "Border configuration.",
                    "$ref": "#/$defs/scale_options_border"
                },
                "display": {
                    "default": true,
                    "description": "Controls the axis global visibility (visible when true, hidden when false). When display: 'auto', the axis is visible only if at least one associated dataset is visible.",
                    "type": [ "boolean", "string" ]
                },
                "grid": {
                    "description": "Grid line configuration.",
                    "$ref": "#/$defs/scale_options_grid"
                },
                "min": {
                    "description": "User defined minimum value for the scale, overrides minimum value from data.",
                    "type": [ "string", "number", "null" ]
                },
                "max": {
                    "description": "User defined maximum value for the scale, overrides maximum value from data.",
                    "type": [ "string", "number", "null" ]
                },
                "reverse": {
                    "default": false,
                    "description": "Reverse the scale.",
                    "type": "boolean"
                },
                "stacked": {
                    "default": false,
                    "description": "Should the data be stacked.",
                    "type": [ "boolean", "string" ]
                },
                "suggestedMin": {
                    "description": "Adjustment used when calculating the maximum data value.",
                    "type": ["string", "number"]
                },
                "suggestedMax": {
                    "description": "Adjustment used when calculating the minimum data value.",
                    "type": ["string", "number"]
                },
                "ticks": {
                    "description": "Tick configuration.",
                    "$ref": "#/$defs/scale_options_ticks"
                },
                "weight": {
                    "default": 0,
                    "description": "The weight used to sort the axis. Higher weights are further away from the chart area.",
                    "type": "number"
                }
            }
        },
        "scale_options_border": {
            "type": "object",
            "default": {
                "display": true,
                "width": 1,
                "dash": [],
                "dashOffset": 0.0,
                "z": 0
            },
            "properties": {
                "display": {
                    "default": true,
                    "description": "If true, draw a border at the edge between the axis and the chart area.",
                    "type": "boolean"
                },
                "color": {
                    "description": "The color of the border line.",
                    "$ref": "#/$defs/color"
                },
                "width": {
                    "default": 1,
                    "description": "The width of the border line.",
                    "type": "number"
                },
                "dash": {
                    "default": [],
                    "description": "Length and spacing of dashes on grid lines.",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "dashOffset": {
                    "default": 0.0,
                    "description": "Offset for line dashes.",
                    "type": "number"
                },
                "z": {
                    "default": 0,
                    "description": "z-index of the border layer. Values <= 0 are drawn under datasets, > 0 on top.",
                    "type": "number"
                }
            }
        },
        "scale_options_grid": {
            "type": "object",
            "default": {
                "circular": false,
                "color": null,
                "display": true,
                "drawOnChartArea": true,
                "drawTicks": true,
                "lineWidth": 1,
                "offset": false,
                "tickBorderDash": [],
                "tickLength": 8,
                "z": -1
            },
            "properties": {
                "color": {
                    "$ref": "#/$defs/color"
                }
            }
        },
        "scale_options_ticks": {
            "type": "object",
            "default": {
                "backdropColor": "rgba(255, 255, 255, 0.75)",
                "backdropPadding": 2,
                "display": true,
                "major": {},
                "padding": 3,
                "showLabelBackdrop": false,
                "textStrokeColor": "",
                "textStrokeWidth": 0,
                "z": 0
            },
            "properties": {
                "backdropColor": {
                    "description": "Color of label backdrops.",
                    "$ref": "#/$defs/color"
                },
                "backdropPadding": {
                    "description": "Padding of label backdrop.",
                    "$ref": "#/$defs/padding"
                },
                "display": {
                    "default": true,
                    "description": "If true, show tick labels.",
                    "type": "boolean"
                },
                "color": {
                    "description": "Color of ticks.",
                    "$ref": "#/$defs/color"
                },
                "font": {
                    "description": "Label font.",
                    "$ref": "#/$defs/font"
                },
                "major": {
                    "default": {},
                    "description": "Major ticks configuration.",
                    "$ref": "#/$defs/scale_options_ticks_major"
                },
                "padding": {
                    "description": "Sets the offset of the tick labels from the axis.",
                    "$ref": "#/$defs/padding"
                },
                "showLabelBackdrop": {
                    "default": true,
                    "description": "If true, draw a background behind the tick labels.",
                    "type": "boolean"
                },
                "textStrokeColor": {
                    "description": 	"The color of the stroke around the text.",
                    "$ref": "#/$defs/color"
                },
                "textStrokeWidth": {
                    "default": 0,
                    "description": "Stroke width around the text.",
                    "type": "number"
                },
                "x": {
                    "default": 0,
                    "description": "z-index of tick layer. Useful when ticks are drawn on chart area. Values <= 0 are drawn under datasets, > 0 on top.",
                    "type": "number"
                }
            }
        },
        "scale_options_ticks_major": {
            "type": "object",
            "default": {
                "enabled": false
            },
            "properties": {
                "enabled": {
                    "default": false,
                    "description": "If true, major ticks are generated. A major tick will affect autoskipping and major will be defined on ticks in the scriptable options context.",
                    "type": "boolean"
                }
            }
        },
        "scale_type": {
            "type": "string",
            "default": "linear",
            "suggestions": [
                "category",
                "hierarchical",
                "linear",
                "logarithmic",
                "radialLinear",
                "time",
                "timeseries"
            ]
        },
        "text_alignment": {
            "type": "string",
            "default": "left",
            "enum": [
                "left",
                "center",
                "right"
            ]
        },
        "text_direction": {
            "type": "string",
            "description": "This will force the text direction 'rtl' or 'ltr' on the canvas for rendering the tooltips, regardless of the css specified on the canvas.",
            "enum": [
                "rtl",
                "ltr"
            ],
            "default": "rtl",
            "required": false
        },
        "transitions": {
            "type": "object",
            "description": "The core transitions are 'active', 'hide', 'reset', 'resize', 'show'. A custom transition can be used by passing a custom mode to update. Transition extends the main animation configuration and animations configuration.",
            "properties": {
                "active": {
                    "$ref": "#/$defs/transition_mode",
                    "default": {
                        "animation": {
                            "duration": 400
                        }
                    }
                },
                "hide": {
                    "$ref": "#/$defs/transition_mode",
                    "default": {
                        "animations": {
                            "colors": {
                                "type": "color",
                                "properties": [ "borderColor", "backgroundColor" ],
                                "from": "transparent"
                            },
                            "visible": {
                                "type": "boolean",
                                "duration": "easeInExpo"
                            }
                        }
                    }
                },
                "reset": {
                    "$ref": "#/$defs/transition_mode",
                    "default": {}
                },
                "resize": {
                    "$ref": "#/$defs/transition_mode",
                    "default": {
                        "animation": {
                            "duration": 400
                        }
                    }
                },
                "show": {
                    "$ref": "#/$defs/transition_mode",
                    "default": {
                        "animations": {
                            "colors": {
                                "type": "color",
                                "properties": [ "borderColor", "backgroundColor" ],
                                "from": "transparent"
                            },
                            "visible": {
                                "type": "boolean",
                                "duration": 0
                            }
                        }
                    }
                }
            }
        },
        "transition_mode": {
            "type": "object",
            "properties": {
                "animation": {
                    "$ref": "#/$defs/animation"
                },
                "animations": {
                    "$ref": "#/$defs/animations"
                }
            }
        },
        "update_mode": {
            "type": ["string", "null"],
            "suggestions": [
                "resize",
                "reset",
                "none",
                "hide",
                "show",
                "default",
                "active",
                "zoom"
            ]
        }
    },
    "properties": {
        "type": {
            "default": "line",
            "description": "Chart type.",
            "$ref": "#/$defs/chart_type"
        },
        "data": {
            "description": "Chart data.",
            "$ref": "#/$defs/chart_data"
        },
        "options": {
            "description": "Chart options.",
            "$ref": "#/$defs/chart_options"
        },
        "events": {
            "description": "JavaScript chart events. The `chart` object is provided.",
            "$ref": "#/$defs/chart_events"
        },
        "plugins": {
            "description": "Manually registered plugins.",
            "$ref": "#/$defs/chart_plugins"
        },
        "redraw": {
            "description": "Teardown and redraw chart on every update.",
            "type": ["boolean", "null"]
        },
        "updateMode": {
            "description": "A mode string to indicate which transition configuration should be used.",
            "$ref": "#/$defs/update_mode"
        },
        "style": {
            "$ref": "urn:ignition-schema:schemas/style-properties.schema.json",
            "default": {
                "classes": ""
            }
        }
    },
    "type": "object",
    "required": ["type", "data", "options"]
}